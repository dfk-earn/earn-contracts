{
  "address": "0xa58b203f24a3C0C165094CB8329E6D90fC4Fe24A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DFKQuest",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_JEWEL",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        }
      ],
      "name": "QuestFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "quest",
          "type": "address"
        }
      ],
      "name": "QuestTypeAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DFKQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JEWEL",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        }
      ],
      "name": "addQuestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_erc20Tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdrawalERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdrawalERC721Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "cancelQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        }
      ],
      "name": "completeQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_items",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "sellToVender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_extraFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setExtraFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_extraFeeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setExtraFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePerHero",
          "type": "uint256"
        }
      ],
      "name": "setFeePerHero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_heroIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_attempts",
          "type": "uint8"
        }
      ],
      "name": "startQuest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_heroIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quest",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_attempts",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "uint1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint3",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "uint4",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "int1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "int2",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "string1",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "string2",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "address1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address2",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address3",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "address4",
              "type": "address"
            }
          ],
          "internalType": "struct DFKEarnQuest.QuestData",
          "name": "_questData",
          "type": "tuple"
        }
      ],
      "name": "startQuestWithData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedQuest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "tryGetAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6e6d379a1a916d2c67f0a564d993abbf9c1776ce3ddf17092ca8a34e2251a2f",
  "receipt": {
    "to": null,
    "from": "0x0B1f506d4A9C0b1091bCAd24567C08fdCcaD2B64",
    "contractAddress": "0xa58b203f24a3C0C165094CB8329E6D90fC4Fe24A",
    "transactionIndex": 2,
    "gasUsed": "3692522",
    "logsBloom": "0x
    "blockHash": "0x29bef55e79868b734f3523e7c0b9882441f3f803b3e5087ae4283172425d2984",
    "transactionHash": "0xa6e6d379a1a916d2c67f0a564d993abbf9c1776ce3ddf17092ca8a34e2251a2f",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23512419,
        "transactionHash": "0xa6e6d379a1a916d2c67f0a564d993abbf9c1776ce3ddf17092ca8a34e2251a2f",
        "address": "0xa58b203f24a3C0C165094CB8329E6D90fC4Fe24A",
        "topics": [
          "0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc"
        ],
        "data": "0x0000000000000000000000000b1f506d4a9c0b1091bcad24567c08fdccad2b640000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x29bef55e79868b734f3523e7c0b9882441f3f803b3e5087ae4283172425d2984"
      }
    ],
    "blockNumber": 23512419,
    "cumulativeGasUsed": "4042791",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x26B1029bD0bEEb31F2F5da74d2dd19fAC92b85Cc",
    "0x5100Bd31b822371108A0f63DCFb6594b9919Eaf4",
    "0x72Cb10C6bfA5624dD07Ef608027E366bd690048F"
  ],
  "numDeployments": 1,
  "solcInputHash": "35bd8e0ff71a43f5bb2b479f8778ff22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DFKQuest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_JEWEL\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"QuestFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quest\",\"type\":\"address\"}],\"name\":\"QuestTypeAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DFKQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JEWEL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"}],\"name\":\"addQuestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_erc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawalERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721Token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawalERC721Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"cancelQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"}],\"name\":\"completeQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_items\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"sellToVender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraFeeRate\",\"type\":\"uint256\"}],\"name\":\"setExtraFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extraFeeThreshold\",\"type\":\"uint256\"}],\"name\":\"setExtraFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePerHero\",\"type\":\"uint256\"}],\"name\":\"setFeePerHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attempts\",\"type\":\"uint8\"}],\"name\":\"startQuest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_heroIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quest\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_attempts\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"uint1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uint4\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"int1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"int2\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"string1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"string2\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address4\",\"type\":\"address\"}],\"internalType\":\"struct DFKEarnQuest.QuestData\",\"name\":\"_questData\",\"type\":\"tuple\"}],\"name\":\"startQuestWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedQuest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tryGetAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dfkearn/DFKEarnQuest.sol\":\"DFKEarnQuest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/dfkearn/DFKEarnBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IAccountFactory.sol\\\";\\n\\ncontract DFKEarnBase {\\n    address public admin;\\n    address public pendingAdmin;\\n\\n    address public immutable accountFactory;\\n\\n    event NewAdmin(address newAdmin, address oldAdmin);\\n    event NewPendingAdmin(address newPendingAdmin, address oldPendingAdmin);\\n\\n    constructor(address _accountFacotry) {\\n        admin = msg.sender;\\n        emit NewAdmin(admin, address(0));\\n        accountFactory = _accountFacotry;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"DFKEarn: not admin\\\");\\n        _;\\n    }\\n\\n    function sellToVender(\\n        address[] calldata _items,\\n        uint[] calldata _amounts\\n    ) external {\\n        address DFKVender = 0xe53BF78F8b99B6d356F93F41aFB9951168cca2c6;\\n        address account = getAccount(msg.sender);\\n        for (uint i = 0; i < _items.length; i++) {\\n            uint balance = IERC20(_items[i]).balanceOf(account);\\n            require(_amounts[i] <= balance, \\\"DFKEarn: insufficient balance\\\");\\n            IAccount(account).functionCall(_items[i], abi.encodeWithSignature(\\n                \\\"approve(address,uint256)\\\",\\n                DFKVender,\\n                _amounts[i]\\n            ));\\n            IAccount(account).functionCall(DFKVender, abi.encodeWithSelector(\\n                bytes4(0x096c5e1a),\\n                _items[i],\\n                _amounts[i]\\n            ));\\n        }\\n    }\\n\\n    function withdrawalNativeToken(uint256 _amount) external {\\n        address account = getAccount(msg.sender);\\n        require(_amount <= account.balance, \\\"DFKEarn: insufficient balance\\\");\\n        IAccount(account).sendValue(payable(msg.sender), _amount);\\n    }\\n\\n    function batchWithdrawalERC20Tokens(\\n        address[] calldata _erc20Tokens,\\n        uint256[] calldata _amounts\\n    )\\n        external\\n    {\\n        address account = getAccount(msg.sender);\\n        for (uint i = 0; i < _erc20Tokens.length; i++) {\\n            uint256 balance = IERC20(_erc20Tokens[i]).balanceOf(address(account));\\n            require(_amounts[i] <= balance, \\\"DFKEarn: insufficient balance\\\");\\n            IAccount(account).functionCall(_erc20Tokens[i], abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                msg.sender,\\n                _amounts[i]\\n            ));\\n        }\\n    }\\n\\n    function batchWithdrawalERC721Tokens(\\n        address _erc721Token,\\n        uint256[] calldata _tokenIds\\n    )\\n        external\\n    {\\n        address account = getAccount(msg.sender);\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            address owner = IERC721(_erc721Token).ownerOf(_tokenIds[i]);\\n            require(owner == account, \\\"DFKEarn: not owner\\\");\\n            IAccount(account).functionCall(_erc721Token, abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256)\\\",\\n                account,\\n                msg.sender,\\n                _tokenIds[i]\\n            ));\\n        }\\n    }\\n\\n    function setPendingAdmin(address _newPendingAdmin) external onlyAdmin {\\n        require(\\n            _newPendingAdmin != admin && _newPendingAdmin != address(0),\\n            \\\"DFKEarn: invalid address\\\"\\n        );\\n        if (pendingAdmin != _newPendingAdmin) {\\n            address oldPendingAdmin = pendingAdmin;\\n            pendingAdmin = _newPendingAdmin;\\n            emit NewPendingAdmin(pendingAdmin, oldPendingAdmin);\\n        }\\n    }\\n\\n    function acceptAdmin() external {\\n        require(\\n            msg.sender == pendingAdmin && msg.sender != address(0),\\n            \\\"DFKEarn: not pending admin\\\"\\n        );\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n        emit NewAdmin(admin, oldAdmin);\\n        emit NewPendingAdmin(pendingAdmin, oldPendingAdmin);\\n    }\\n\\n    function tryGetAccount(address user) public view returns (address) {\\n        return IAccountFactory(accountFactory).accounts(user);\\n    }\\n\\n    function getAccount(address user) public view returns (address) {\\n        address account = tryGetAccount(user);\\n        require(account != address(0), \\\"DFKEarn: no account\\\");\\n        return account;\\n    }\\n\\n    function hasAccount(address user) public view returns (bool) {\\n        return tryGetAccount(user) != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xab33fa617875feff3c48832dd5324f75862944f9a1a33c38928b5e86c21b0afe\",\"license\":\"MIT\"},\"contracts/dfkearn/DFKEarnQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./DFKEarnBase.sol\\\";\\n\\ncontract DFKEarnQuest is DFKEarnBase {\\n    struct QuestData {\\n        uint256 uint1;\\n        uint256 uint2;\\n        uint256 uint3;\\n        uint256 uint4;\\n        int256 int1;\\n        int256 int2;\\n        string string1;\\n        string string2;\\n        address address1;\\n        address address2;\\n        address address3;\\n        address address4;\\n    }\\n\\n    address public immutable DFKQuest;\\n    IERC20 public immutable JEWEL;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    mapping(address => bool) public supportedQuest;\\n    uint private feePerHero = 0.12 ether;\\n\\n    uint256 public extraFeeThreshold = 0.25e18;  // 0.25 jewel\\n    uint256 public extraFeeRate = 250; // in bps\\n\\n    event QuestFeeChanged(uint256 newValue, uint256 oldValue);\\n    event QuestTypeAdded(address quest);\\n\\n    constructor(\\n        address _accountFactory,\\n        address _DFKQuest,\\n        address _JEWEL\\n    )\\n        DFKEarnBase(_accountFactory)\\n    {\\n        DFKQuest = _DFKQuest;\\n        JEWEL = IERC20(_JEWEL);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators.contains(msg.sender), \\\"DFKEarn: not operator\\\");\\n        _;\\n    }\\n\\n    function startQuest(\\n        address _account,\\n        uint256[] calldata _heroIds,\\n        address _quest,\\n        uint8 _attempts\\n    ) \\n        external\\n        onlyOperator\\n    {\\n        uint256 fee = _heroIds.length * feePerHero;\\n        require(_account.balance >= fee, \\\"DFKEarn: insufficent balance\\\");\\n        require(supportedQuest[_quest], \\\"DFKEarn: unsupported quest\\\");\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"startQuest(uint256[],address,uint8)\\\",\\n            _heroIds,\\n            _quest,\\n            _attempts\\n        ));\\n        IAccount(_account).sendValue(payable(admin), fee);\\n    }\\n\\n    function startQuestWithData(\\n        address _account,\\n        uint256[] calldata _heroIds,\\n        address _quest,\\n        uint8 _attempts,\\n        QuestData calldata _questData\\n    )\\n        external\\n        onlyOperator\\n    {\\n        uint256 fee = _heroIds.length * feePerHero;\\n        require(_account.balance >= fee, \\\"DFKEarn: insufficent balance\\\");\\n        require(supportedQuest[_quest], \\\"DFKEarn: unsupported quest\\\");\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"startQuestWithData(uint256[],address,uint8,(uint256,uint256,uint256,uint256,int256,int256,string,string,address,address,address,address))\\\",\\n            _heroIds,\\n            _quest,\\n            _attempts,\\n            _questData\\n        ));\\n        IAccount(_account).sendValue(payable(admin), fee);\\n    }\\n\\n    function cancelQuest(address _account, uint256 _heroId) external onlyOperator {\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"cancelQuest(uint256)\\\",\\n            _heroId\\n        ));\\n    }\\n\\n    function completeQuest(address _account, uint256 _heroId) external onlyOperator {\\n        uint256 balanceBefore = JEWEL.balanceOf(_account);\\n        IAccount(_account).functionCall(DFKQuest, abi.encodeWithSignature(\\n            \\\"completeQuest(uint256)\\\",\\n            _heroId\\n        ));\\n        uint256 balanceAfter = JEWEL.balanceOf(_account);\\n        uint256 profit = balanceAfter - balanceBefore;\\n        if (profit >= extraFeeThreshold) {\\n            uint256 extraFee = profit * extraFeeRate / 10_000;\\n            IAccount(_account).functionCall(address(JEWEL), abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                admin,\\n                extraFee\\n            ));\\n        }\\n    }\\n\\n    function addQuestType(address _quest) external onlyAdmin {\\n        if (!supportedQuest[_quest]) {\\n            supportedQuest[_quest] = true;\\n            emit QuestTypeAdded(_quest);\\n        }\\n    }\\n\\n    function setFeePerHero(uint256 _feePerHero) external onlyAdmin {\\n        uint256 oldValue = feePerHero;\\n        feePerHero = _feePerHero;\\n        emit QuestFeeChanged(feePerHero, oldValue);\\n    }\\n\\n    function setExtraFeeThreshold(uint256 _extraFeeThreshold) external onlyAdmin {\\n        extraFeeThreshold = _extraFeeThreshold;\\n    }\\n\\n    function setExtraFeeRate(uint256 _extraFeeRate) external onlyAdmin {\\n        extraFeeRate = _extraFeeRate;\\n    }\\n\\n    function addOperator(address _operator) external onlyAdmin {\\n        operators.add(_operator);\\n    }\\n\\n    function removeOperator(address _operator) external onlyAdmin {\\n        operators.remove(_operator);\\n    }\\n\\n    function getOperators() public view returns (address[] memory) {\\n        uint length = operators.length();\\n        address[] memory result = new address[](length);\\n        for (uint i = 0; i < length; i++) {\\n            result[i] = operators.at(i);\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x131e9e5f61b8c1023b0a34593f8034d95d845aa3190999b5065b8a75f33f5618\",\"license\":\"MIT\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccount {\\n    event Received(address indexed sender, uint value);\\n    event WhitelistAdded(address indexed _address);\\n    event WhitelistRemoved(address indexed _address);\\n\\n    function factory() external view returns (address);\\n    function owner() external view returns (address);\\n    function sendValue(address payable _recipient, uint256 _amount) external payable;\\n    function functionCall(address _target, bytes memory _data) external payable returns (bytes memory result);\\n    function functionCallWithValue(address _target, bytes memory _data, uint _value) external payable returns (bytes memory result);\\n    function isWhitelisted(address _address) external view returns(bool);\\n    function getWhitelist() external view returns (address[] memory);\\n    function updateWhitelist(address[] memory _toAdd, address[] memory _toRemove) external;\\n    function addToWhitelist(address[] memory _toAdd) external;\\n    function removeFromWhitelist(address[] memory _toRemove) external;\\n}\\n\",\"keccak256\":\"0x71357dc506ed95791dd43420f32bb07290a49462d2fa5f3692a2708bffc9f997\",\"license\":\"MIT\"},\"contracts/interfaces/IAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAccountFactory {\\n    event AccountCreated(\\n        address indexed creator,\\n        address indexed account,\\n        uint index\\n    );\\n\\n    function accounts(address creator) external view returns (address account);\\n    function creators(uint256 index) external view returns (address creator);\\n    function total() external view returns (uint256);\\n    function createAccount() external payable returns (address account);\\n    function createAccountWithWhitelist(address[] memory whitelist) external payable returns (address account);\\n    function hasAccount(address creator) external view returns (bool);\\n}\",\"keccak256\":\"0x3bcafde7d58fa5779e3ba6452ec259134d71c035b0ffd52ffd5c8dd0ad936356\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526701aa535d3d0c00006005556703782dace9d9000060065560fa6007553480156200002e57600080fd5b506040516200438b3803806200438b8339818101604052810190620000549190620001b7565b82336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051620000e99291906200021e565b60405180910390a18073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505062000299565b600081519050620001b1816200027f565b92915050565b600080600060608486031215620001cd57600080fd5b6000620001dd86828701620001a0565b9350506020620001f086828701620001a0565b92505060406200020386828701620001a0565b9150509250925092565b62000218816200024b565b82525050565b60006040820190506200023560008301856200020d565b6200024460208301846200020d565b9392505050565b600062000258826200025f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200028a816200024b565b81146200029657600080fd5b50565b60805160601c60a05160601c60c05160601c6140816200030a60003960008181611565015281816122ae0152818161249b015261259a015260008181610997015281816117cb01528181611fca015281816123750152612853015260008181610878015261154101526140816000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637a5cadd0116100f9578063c8e40fbf11610097578063eba53f7d11610071578063eba53f7d146104a1578063f243fbff146104bd578063f851a440146104d9578063fbcbc0f1146104f7576101c4565b8063c8e40fbf14610425578063d671b45914610455578063d95780c714610471576101c4565b8063ac8a584a116100d3578063ac8a584a146103b3578063b3835447146103cf578063b8de0547146103eb578063b90adda214610409576101c4565b80637a5cadd01461035f57806388fd6cbd1461037b5780639870d7fe14610397576101c4565b80632bdef6bf116101665780633760da5a116101405780633760da5a146102eb5780634dd18bf514610307578063687cd9c1146103235780636ff6890c14610341576101c4565b80632bdef6bf146102935780632eaa6053146102b1578063333ffea1146102cd576101c4565b80631f77a06a116101a25780631f77a06a1461021f578063242ced8f1461023b578063267822471461025757806327a099d814610275576101c4565b80630e18b681146101c95780631ba61179146101d35780631cc1b0e1146101ef575b600080fd5b6101d1610527565b005b6101ed60048036038101906101e89190613251565b610799565b005b61020960048036038101906102049190612f8b565b610874565b6040516102169190613708565b60405180910390f35b6102396004803603810190610234919061315f565b610926565b005b61025560048036038101906102509190613251565b610abd565b005b61025f610b55565b60405161026c9190613708565b60405180910390f35b61027d610b7b565b60405161028a9190613805565b60405180910390f35b61029b610cac565b6040516102a89190613a12565b60405180910390f35b6102cb60048036038101906102c69190612fdd565b610cb2565b005b6102d5610f85565b6040516102e29190613a12565b60405180910390f35b6103056004803603810190610300919061319b565b610f8b565b005b610321600480360381019061031c9190612f8b565b6112cc565b005b61032b61153f565b6040516103389190613708565b60405180910390f35b610349611563565b60405161035691906138d7565b60405180910390f35b61037960048036038101906103749190613251565b611587565b005b610395600480360381019061039091906130b5565b61165f565b005b6103b160048036038101906103ac9190612f8b565b61198b565b005b6103cd60048036038101906103c89190612f8b565b611a31565b005b6103e960048036038101906103e4919061319b565b611ad7565b005b6103f3611fc8565b6040516104009190613708565b60405180910390f35b610423600480360381019061041e9190612f8b565b611fec565b005b61043f600480360381019061043a9190612f8b565b61215e565b60405161044c91906138bc565b60405180910390f35b61046f600480360381019061046a9190613251565b61219f565b005b61048b60048036038101906104869190612f8b565b612237565b60405161049891906138bc565b60405180910390f35b6104bb60048036038101906104b6919061315f565b612257565b005b6104d760048036038101906104d29190613035565b6126e7565b005b6104e1612a10565b6040516104ee9190613708565b60405180910390f35b610511600480360381019061050c9190612f8b565b612a34565b60405161051e9190613708565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156105b15750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b6105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e7906139d2565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161073292919061374c565b60405180910390a17fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161078d92919061374c565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e906138f2565b60405180910390fd5b60006005549050816005819055507f95ed68237a6a1d4200ec409bb080ba6295f2a426346b3d475f4bf3a412cc30be60055482604051610868929190613a2d565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635e5c06e2836040518263ffffffff1660e01b81526004016108cf9190613708565b60206040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190612fb4565b9050919050565b61093a336002612abb90919063ffffffff16565b610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090613992565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000836040516024016109c79190613a12565b6040516020818303038152906040527ffe90ff7d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610a619291906137ac565b600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ab89190613210565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b42906138f2565b60405180910390fd5b8060068190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610b896002612aeb565b905060008167ffffffffffffffff811115610bcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bfb5781602001602082028036833780820191505090505b50905060005b82811015610ca357610c1d816002612b0090919063ffffffff16565b828281518110610c56577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610c9b90613d97565b915050610c01565b50809250505090565b60075481565b6000610cbd33612a34565b905060005b83839050811015610f7e5760008573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610d479190613a12565b60206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190612fb4565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe906139f2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0878533898988818110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401610e7893929190613775565b6040516020818303038152906040527f42842e0e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610f129291906137ac565b600060405180830381600087803b158015610f2c57600080fd5b505af1158015610f40573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f699190613210565b50508080610f7690613d97565b915050610cc2565b5050505050565b60065481565b6000610f9633612a34565b905060005b858590508110156112c4576000868683818110610fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ff69190612f8b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161102e9190613708565b60206040518083038186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e919061327a565b9050808585848181106110ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351115611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f9906139b2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0888885818110611157577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061116c9190612f8b565b338888878181106111a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516024016111be9291906137dc565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016112589291906137ac565b600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112af9190613210565b505080806112bc90613d97565b915050610f9b565b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461135a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611351906138f2565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156113e35750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990613932565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461153c576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161153292919061374c565b60405180910390a1505b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061159233612a34565b90508073ffffffffffffffffffffffffffffffffffffffff16318211156115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e5906139b2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166324a084df33846040518363ffffffff1660e01b8152600401611629929190613723565b600060405180830381600087803b15801561164357600080fd5b505af1158015611657573d6000803e3d6000fd5b505050505050565b611673336002612abb90919063ffffffff16565b6116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a990613992565b60405180910390fd5b6000600554868690506116c59190613c01565b9050808773ffffffffffffffffffffffffffffffffffffffff16311015611721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171890613912565b60405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490613952565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f00000000000000000000000000000000000000000000000000000000000000008888888888604051602401611803959493929190613867565b6040516020818303038152906040527ff51333f5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161189d9291906137ac565b600060405180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118f49190613210565b508673ffffffffffffffffffffffffffffffffffffffff166324a084df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611950929190613723565b600060405180830381600087803b15801561196a57600080fd5b505af115801561197e573d6000803e3d6000fd5b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906138f2565b60405180910390fd5b611a2d816002612b1a90919063ffffffff16565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab6906138f2565b60405180910390fd5b611ad3816002612b4a90919063ffffffff16565b5050565b600073e53bf78f8b99b6d356f93f41afb9951168cca2c690506000611afb33612a34565b905060005b86869050811015611fbf576000878783818110611b46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b5b9190612f8b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611b939190613708565b60206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061327a565b905080868684818110611c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351115611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e906139b2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0898985818110611cbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611cd19190612f8b565b86898987818110611d0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401611d239291906137dc565b6040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611dbd9291906137ac565b600060405180830381600087803b158015611dd757600080fd5b505af1158015611deb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e149190613210565b508273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb08563096c5e1a60e01b8b8b87818110611e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611e889190612f8b565b8a8a88818110611ec1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401611ed99291906137dc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611f539291906137ac565b600060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611faa9190613210565b50508080611fb790613d97565b915050611b00565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461207a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612071906138f2565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661215b576001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f649d4d5c4dd44bed2446b194d971cd6c8943566eaacb17183e7a734d07d17826816040516121529190613708565b60405180910390a15b50565b60008073ffffffffffffffffffffffffffffffffffffffff1661218083610874565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461222d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612224906138f2565b60405180910390fd5b8060078190555050565b60046020528060005260406000206000915054906101000a900460ff1681565b61226b336002612abb90919063ffffffff16565b6122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a190613992565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016123059190613708565b60206040518083038186803b15801561231d57600080fd5b505afa158015612331573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612355919061327a565b90508273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000846040516024016123a59190613a12565b6040516020818303038152906040527f528be0a9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161243f9291906137ac565b600060405180830381600087803b15801561245957600080fd5b505af115801561246d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124969190613210565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016124f29190613708565b60206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612542919061327a565b9050600082826125529190613c5b565b905060065481106126e0576000612710600754836125709190613c01565b61257a9190613bd0565b90508573ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040516024016125ec9291906137dc565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016126869291906137ac565b600060405180830381600087803b1580156126a057600080fd5b505af11580156126b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126dd9190613210565b50505b5050505050565b6126fb336002612abb90919063ffffffff16565b61273a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273190613992565b60405180910390fd5b60006005548585905061274d9190613c01565b9050808673ffffffffffffffffffffffffffffffffffffffff163110156127a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a090613912565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282c90613952565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000878787876040516024016128899493929190613827565b6040516020818303038152906040527fc855dea3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016129239291906137ac565b600060405180830381600087803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061297a9190613210565b508573ffffffffffffffffffffffffffffffffffffffff166324a084df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016129d6929190613723565b600060405180830381600087803b1580156129f057600080fd5b505af1158015612a04573d6000803e3d6000fd5b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080612a4083610874565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa990613972565b60405180910390fd5b80915050919050565b6000612ae3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b7a565b905092915050565b6000612af982600001612b9d565b9050919050565b6000612b0f8360000183612bae565b60001c905092915050565b6000612b42836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612bff565b905092915050565b6000612b72836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c6f565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000826000018281548110612bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000612c0b8383612b7a565b612c64578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c69565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612de9576000600182612ca19190613c5b565b9050600060018660000180549050612cb99190613c5b565b9050818114612d74576000866000018281548110612d00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612d4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612dae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612def565b60009150505b92915050565b6000612e08612e0384613a7b565b613a56565b905082815260208101848484011115612e2057600080fd5b612e2b848285613d33565b509392505050565b600081359050612e4281613fef565b92915050565b600081519050612e5781613fef565b92915050565b60008083601f840112612e6f57600080fd5b8235905067ffffffffffffffff811115612e8857600080fd5b602083019150836020820283011115612ea057600080fd5b9250929050565b60008083601f840112612eb957600080fd5b8235905067ffffffffffffffff811115612ed257600080fd5b602083019150836020820283011115612eea57600080fd5b9250929050565b600082601f830112612f0257600080fd5b8151612f12848260208601612df5565b91505092915050565b600081359050612f2a81614006565b92915050565b60006101808284031215612f4357600080fd5b81905092915050565b600081359050612f5b8161401d565b92915050565b600081519050612f708161401d565b92915050565b600081359050612f8581614034565b92915050565b600060208284031215612f9d57600080fd5b6000612fab84828501612e33565b91505092915050565b600060208284031215612fc657600080fd5b6000612fd484828501612e48565b91505092915050565b600080600060408486031215612ff257600080fd5b600061300086828701612e33565b935050602084013567ffffffffffffffff81111561301d57600080fd5b61302986828701612ea7565b92509250509250925092565b60008060008060006080868803121561304d57600080fd5b600061305b88828901612e33565b955050602086013567ffffffffffffffff81111561307857600080fd5b61308488828901612ea7565b9450945050604061309788828901612e33565b92505060606130a888828901612f76565b9150509295509295909350565b60008060008060008060a087890312156130ce57600080fd5b60006130dc89828a01612e33565b965050602087013567ffffffffffffffff8111156130f957600080fd5b61310589828a01612ea7565b9550955050604061311889828a01612e33565b935050606061312989828a01612f76565b925050608087013567ffffffffffffffff81111561314657600080fd5b61315289828a01612f30565b9150509295509295509295565b6000806040838503121561317257600080fd5b600061318085828601612e33565b925050602061319185828601612f4c565b9150509250929050565b600080600080604085870312156131b157600080fd5b600085013567ffffffffffffffff8111156131cb57600080fd5b6131d787828801612e5d565b9450945050602085013567ffffffffffffffff8111156131f657600080fd5b61320287828801612ea7565b925092505092959194509250565b60006020828403121561322257600080fd5b600082015167ffffffffffffffff81111561323c57600080fd5b61324884828501612ef1565b91505092915050565b60006020828403121561326357600080fd5b600061327184828501612f4c565b91505092915050565b60006020828403121561328c57600080fd5b600061329a84828501612f61565b91505092915050565b60006132af83836132ca565b60208301905092915050565b6132c481613ca1565b82525050565b6132d381613c8f565b82525050565b6132e281613c8f565b82525050565b60006132f382613abc565b6132fd8185613adf565b935061330883613aac565b8060005b8381101561333957815161332088826132a3565b975061332b83613ad2565b92505060018101905061330c565b5085935050505092915050565b60006133528385613af0565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561338157600080fd5b602083029250613392838584613d24565b82840190509392505050565b6133a781613cb3565b82525050565b60006133b882613ac7565b6133c28185613b01565b93506133d2818560208601613d33565b6133db81613e6d565b840191505092915050565b6133ef81613d00565b82525050565b6133fe81613cbf565b82525050565b60006134108385613b12565b935061341d838584613d24565b61342683613e6d565b840190509392505050565b600061343e601283613b23565b915061344982613e7e565b602082019050919050565b6000613461601c83613b23565b915061346c82613ea7565b602082019050919050565b6000613484601883613b23565b915061348f82613ed0565b602082019050919050565b60006134a7601a83613b23565b91506134b282613ef9565b602082019050919050565b60006134ca601383613b23565b91506134d582613f22565b602082019050919050565b60006134ed601583613b23565b91506134f882613f4b565b602082019050919050565b6000613510601d83613b23565b915061351b82613f74565b602082019050919050565b6000613533601a83613b23565b915061353e82613f9d565b602082019050919050565b6000613556601283613b23565b915061356182613fc6565b602082019050919050565b600061018083016135806000840184613bb9565b61358d60008601826136db565b5061359b6020840184613bb9565b6135a860208601826136db565b506135b66040840184613bb9565b6135c360408601826136db565b506135d16060840184613bb9565b6135de60608601826136db565b506135ec6080840184613b4b565b6135f960808601826133f5565b5061360760a0840184613b4b565b61361460a08601826133f5565b5061362260c0840184613b62565b85830360c0870152613635838284613404565b9250505061364660e0840184613b62565b85830360e0870152613659838284613404565b9250505061366b610100840184613b34565b6136796101008601826132ca565b50613688610120840184613b34565b6136966101208601826132ca565b506136a5610140840184613b34565b6136b36101408601826132ca565b506136c2610160840184613b34565b6136d06101608601826132ca565b508091505092915050565b6136e481613ce9565b82525050565b6136f381613ce9565b82525050565b61370281613cf3565b82525050565b600060208201905061371d60008301846132d9565b92915050565b600060408201905061373860008301856132bb565b61374560208301846136ea565b9392505050565b600060408201905061376160008301856132d9565b61376e60208301846132d9565b9392505050565b600060608201905061378a60008301866132d9565b61379760208301856132d9565b6137a460408301846136ea565b949350505050565b60006040820190506137c160008301856132d9565b81810360208301526137d381846133ad565b90509392505050565b60006040820190506137f160008301856132d9565b6137fe60208301846136ea565b9392505050565b6000602082019050818103600083015261381f81846132e8565b905092915050565b60006060820190508181036000830152613842818688613346565b905061385160208301856132d9565b61385e60408301846136f9565b95945050505050565b60006080820190508181036000830152613882818789613346565b905061389160208301866132d9565b61389e60408301856136f9565b81810360608301526138b0818461356c565b90509695505050505050565b60006020820190506138d1600083018461339e565b92915050565b60006020820190506138ec60008301846133e6565b92915050565b6000602082019050818103600083015261390b81613431565b9050919050565b6000602082019050818103600083015261392b81613454565b9050919050565b6000602082019050818103600083015261394b81613477565b9050919050565b6000602082019050818103600083015261396b8161349a565b9050919050565b6000602082019050818103600083015261398b816134bd565b9050919050565b600060208201905081810360008301526139ab816134e0565b9050919050565b600060208201905081810360008301526139cb81613503565b9050919050565b600060208201905081810360008301526139eb81613526565b9050919050565b60006020820190508181036000830152613a0b81613549565b9050919050565b6000602082019050613a2760008301846136ea565b92915050565b6000604082019050613a4260008301856136ea565b613a4f60208301846136ea565b9392505050565b6000613a60613a71565b9050613a6c8282613d66565b919050565b6000604051905090565b600067ffffffffffffffff821115613a9657613a95613e3e565b5b613a9f82613e6d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613b436020840184612e33565b905092915050565b6000613b5a6020840184612f1b565b905092915050565b60008083356001602003843603038112613b7b57600080fd5b83810192508235915060208301925067ffffffffffffffff821115613b9f57600080fd5b600182023603841315613bb157600080fd5b509250929050565b6000613bc86020840184612f4c565b905092915050565b6000613bdb82613ce9565b9150613be683613ce9565b925082613bf657613bf5613e0f565b5b828204905092915050565b6000613c0c82613ce9565b9150613c1783613ce9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c5057613c4f613de0565b5b828202905092915050565b6000613c6682613ce9565b9150613c7183613ce9565b925082821015613c8457613c83613de0565b5b828203905092915050565b6000613c9a82613cc9565b9050919050565b6000613cac82613cc9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613d0b82613d12565b9050919050565b6000613d1d82613cc9565b9050919050565b82818337600083830152505050565b60005b83811015613d51578082015181840152602081019050613d36565b83811115613d60576000848401525b50505050565b613d6f82613e6d565b810181811067ffffffffffffffff82111715613d8e57613d8d613e3e565b5b80604052505050565b6000613da282613ce9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613dd557613dd4613de0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f44464b4561726e3a206e6f742061646d696e0000000000000000000000000000600082015250565b7f44464b4561726e3a20696e737566666963656e742062616c616e636500000000600082015250565b7f44464b4561726e3a20696e76616c696420616464726573730000000000000000600082015250565b7f44464b4561726e3a20756e737570706f72746564207175657374000000000000600082015250565b7f44464b4561726e3a206e6f206163636f756e7400000000000000000000000000600082015250565b7f44464b4561726e3a206e6f74206f70657261746f720000000000000000000000600082015250565b7f44464b4561726e3a20696e73756666696369656e742062616c616e6365000000600082015250565b7f44464b4561726e3a206e6f742070656e64696e672061646d696e000000000000600082015250565b7f44464b4561726e3a206e6f74206f776e65720000000000000000000000000000600082015250565b613ff881613c8f565b811461400357600080fd5b50565b61400f81613cbf565b811461401a57600080fd5b50565b61402681613ce9565b811461403157600080fd5b50565b61403d81613cf3565b811461404857600080fd5b5056fea264697066735822122065305317d70e0049f5a33ff0cec35c2287184e1dfbbd5ede518c5cbf4fe50e0964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80637a5cadd0116100f9578063c8e40fbf11610097578063eba53f7d11610071578063eba53f7d146104a1578063f243fbff146104bd578063f851a440146104d9578063fbcbc0f1146104f7576101c4565b8063c8e40fbf14610425578063d671b45914610455578063d95780c714610471576101c4565b8063ac8a584a116100d3578063ac8a584a146103b3578063b3835447146103cf578063b8de0547146103eb578063b90adda214610409576101c4565b80637a5cadd01461035f57806388fd6cbd1461037b5780639870d7fe14610397576101c4565b80632bdef6bf116101665780633760da5a116101405780633760da5a146102eb5780634dd18bf514610307578063687cd9c1146103235780636ff6890c14610341576101c4565b80632bdef6bf146102935780632eaa6053146102b1578063333ffea1146102cd576101c4565b80631f77a06a116101a25780631f77a06a1461021f578063242ced8f1461023b578063267822471461025757806327a099d814610275576101c4565b80630e18b681146101c95780631ba61179146101d35780631cc1b0e1146101ef575b600080fd5b6101d1610527565b005b6101ed60048036038101906101e89190613251565b610799565b005b61020960048036038101906102049190612f8b565b610874565b6040516102169190613708565b60405180910390f35b6102396004803603810190610234919061315f565b610926565b005b61025560048036038101906102509190613251565b610abd565b005b61025f610b55565b60405161026c9190613708565b60405180910390f35b61027d610b7b565b60405161028a9190613805565b60405180910390f35b61029b610cac565b6040516102a89190613a12565b60405180910390f35b6102cb60048036038101906102c69190612fdd565b610cb2565b005b6102d5610f85565b6040516102e29190613a12565b60405180910390f35b6103056004803603810190610300919061319b565b610f8b565b005b610321600480360381019061031c9190612f8b565b6112cc565b005b61032b61153f565b6040516103389190613708565b60405180910390f35b610349611563565b60405161035691906138d7565b60405180910390f35b61037960048036038101906103749190613251565b611587565b005b610395600480360381019061039091906130b5565b61165f565b005b6103b160048036038101906103ac9190612f8b565b61198b565b005b6103cd60048036038101906103c89190612f8b565b611a31565b005b6103e960048036038101906103e4919061319b565b611ad7565b005b6103f3611fc8565b6040516104009190613708565b60405180910390f35b610423600480360381019061041e9190612f8b565b611fec565b005b61043f600480360381019061043a9190612f8b565b61215e565b60405161044c91906138bc565b60405180910390f35b61046f600480360381019061046a9190613251565b61219f565b005b61048b60048036038101906104869190612f8b565b612237565b60405161049891906138bc565b60405180910390f35b6104bb60048036038101906104b6919061315f565b612257565b005b6104d760048036038101906104d29190613035565b6126e7565b005b6104e1612a10565b6040516104ee9190613708565b60405180910390f35b610511600480360381019061050c9190612f8b565b612a34565b60405161051e9190613708565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156105b15750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b6105f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e7906139d2565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360405161073292919061374c565b60405180910390a17fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161078d92919061374c565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e906138f2565b60405180910390fd5b60006005549050816005819055507f95ed68237a6a1d4200ec409bb080ba6295f2a426346b3d475f4bf3a412cc30be60055482604051610868929190613a2d565b60405180910390a15050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635e5c06e2836040518263ffffffff1660e01b81526004016108cf9190613708565b60206040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190612fb4565b9050919050565b61093a336002612abb90919063ffffffff16565b610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097090613992565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000836040516024016109c79190613a12565b6040516020818303038152906040527ffe90ff7d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610a619291906137ac565b600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ab89190613210565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b42906138f2565b60405180910390fd5b8060068190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000610b896002612aeb565b905060008167ffffffffffffffff811115610bcd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610bfb5781602001602082028036833780820191505090505b50905060005b82811015610ca357610c1d816002612b0090919063ffffffff16565b828281518110610c56577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610c9b90613d97565b915050610c01565b50809250505090565b60075481565b6000610cbd33612a34565b905060005b83839050811015610f7e5760008573ffffffffffffffffffffffffffffffffffffffff16636352211e868685818110610d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610d479190613a12565b60206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190612fb4565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe906139f2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0878533898988818110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401610e7893929190613775565b6040516020818303038152906040527f42842e0e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610f129291906137ac565b600060405180830381600087803b158015610f2c57600080fd5b505af1158015610f40573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f699190613210565b50508080610f7690613d97565b915050610cc2565b5050505050565b60065481565b6000610f9633612a34565b905060005b858590508110156112c4576000868683818110610fe1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ff69190612f8b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161102e9190613708565b60206040518083038186803b15801561104657600080fd5b505afa15801561105a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107e919061327a565b9050808585848181106110ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351115611102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f9906139b2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0888885818110611157577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061116c9190612f8b565b338888878181106111a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516024016111be9291906137dc565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016112589291906137ac565b600060405180830381600087803b15801561127257600080fd5b505af1158015611286573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112af9190613210565b505080806112bc90613d97565b915050610f9b565b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461135a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611351906138f2565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156113e35750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990613932565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461153c576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161153292919061374c565b60405180910390a1505b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061159233612a34565b90508073ffffffffffffffffffffffffffffffffffffffff16318211156115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e5906139b2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166324a084df33846040518363ffffffff1660e01b8152600401611629929190613723565b600060405180830381600087803b15801561164357600080fd5b505af1158015611657573d6000803e3d6000fd5b505050505050565b611673336002612abb90919063ffffffff16565b6116b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a990613992565b60405180910390fd5b6000600554868690506116c59190613c01565b9050808773ffffffffffffffffffffffffffffffffffffffff16311015611721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171890613912565b60405180910390fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490613952565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f00000000000000000000000000000000000000000000000000000000000000008888888888604051602401611803959493929190613867565b6040516020818303038152906040527ff51333f5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161189d9291906137ac565b600060405180830381600087803b1580156118b757600080fd5b505af11580156118cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118f49190613210565b508673ffffffffffffffffffffffffffffffffffffffff166324a084df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611950929190613723565b600060405180830381600087803b15801561196a57600080fd5b505af115801561197e573d6000803e3d6000fd5b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906138f2565b60405180910390fd5b611a2d816002612b1a90919063ffffffff16565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab6906138f2565b60405180910390fd5b611ad3816002612b4a90919063ffffffff16565b5050565b600073e53bf78f8b99b6d356f93f41afb9951168cca2c690506000611afb33612a34565b905060005b86869050811015611fbf576000878783818110611b46577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611b5b9190612f8b565b73ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401611b939190613708565b60206040518083038186803b158015611bab57600080fd5b505afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061327a565b905080868684818110611c1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201351115611c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5e906139b2565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb0898985818110611cbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611cd19190612f8b565b86898987818110611d0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401611d239291906137dc565b6040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611dbd9291906137ac565b600060405180830381600087803b158015611dd757600080fd5b505af1158015611deb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e149190613210565b508273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb08563096c5e1a60e01b8b8b87818110611e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190611e889190612f8b565b8a8a88818110611ec1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401611ed99291906137dc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401611f539291906137ac565b600060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611faa9190613210565b50508080611fb790613d97565b915050611b00565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461207a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612071906138f2565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661215b576001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f649d4d5c4dd44bed2446b194d971cd6c8943566eaacb17183e7a734d07d17826816040516121529190613708565b60405180910390a15b50565b60008073ffffffffffffffffffffffffffffffffffffffff1661218083610874565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461222d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612224906138f2565b60405180910390fd5b8060078190555050565b60046020528060005260406000206000915054906101000a900460ff1681565b61226b336002612abb90919063ffffffff16565b6122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a190613992565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016123059190613708565b60206040518083038186803b15801561231d57600080fd5b505afa158015612331573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612355919061327a565b90508273ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000846040516024016123a59190613a12565b6040516020818303038152906040527f528be0a9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b815260040161243f9291906137ac565b600060405180830381600087803b15801561245957600080fd5b505af115801561246d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124969190613210565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016124f29190613708565b60206040518083038186803b15801561250a57600080fd5b505afa15801561251e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612542919061327a565b9050600082826125529190613c5b565b905060065481106126e0576000612710600754836125709190613c01565b61257a9190613bd0565b90508573ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040516024016125ec9291906137dc565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016126869291906137ac565b600060405180830381600087803b1580156126a057600080fd5b505af11580156126b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906126dd9190613210565b50505b5050505050565b6126fb336002612abb90919063ffffffff16565b61273a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273190613992565b60405180910390fd5b60006005548585905061274d9190613c01565b9050808673ffffffffffffffffffffffffffffffffffffffff163110156127a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a090613912565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282c90613952565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a0b5ffb07f0000000000000000000000000000000000000000000000000000000000000000878787876040516024016128899493929190613827565b6040516020818303038152906040527fc855dea3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016129239291906137ac565b600060405180830381600087803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061297a9190613210565b508573ffffffffffffffffffffffffffffffffffffffff166324a084df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016129d6929190613723565b600060405180830381600087803b1580156129f057600080fd5b505af1158015612a04573d6000803e3d6000fd5b50505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080612a4083610874565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa990613972565b60405180910390fd5b80915050919050565b6000612ae3836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b7a565b905092915050565b6000612af982600001612b9d565b9050919050565b6000612b0f8360000183612bae565b60001c905092915050565b6000612b42836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612bff565b905092915050565b6000612b72836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c6f565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b6000826000018281548110612bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000612c0b8383612b7a565b612c64578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c69565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612de9576000600182612ca19190613c5b565b9050600060018660000180549050612cb99190613c5b565b9050818114612d74576000866000018281548110612d00577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612d4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612dae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612def565b60009150505b92915050565b6000612e08612e0384613a7b565b613a56565b905082815260208101848484011115612e2057600080fd5b612e2b848285613d33565b509392505050565b600081359050612e4281613fef565b92915050565b600081519050612e5781613fef565b92915050565b60008083601f840112612e6f57600080fd5b8235905067ffffffffffffffff811115612e8857600080fd5b602083019150836020820283011115612ea057600080fd5b9250929050565b60008083601f840112612eb957600080fd5b8235905067ffffffffffffffff811115612ed257600080fd5b602083019150836020820283011115612eea57600080fd5b9250929050565b600082601f830112612f0257600080fd5b8151612f12848260208601612df5565b91505092915050565b600081359050612f2a81614006565b92915050565b60006101808284031215612f4357600080fd5b81905092915050565b600081359050612f5b8161401d565b92915050565b600081519050612f708161401d565b92915050565b600081359050612f8581614034565b92915050565b600060208284031215612f9d57600080fd5b6000612fab84828501612e33565b91505092915050565b600060208284031215612fc657600080fd5b6000612fd484828501612e48565b91505092915050565b600080600060408486031215612ff257600080fd5b600061300086828701612e33565b935050602084013567ffffffffffffffff81111561301d57600080fd5b61302986828701612ea7565b92509250509250925092565b60008060008060006080868803121561304d57600080fd5b600061305b88828901612e33565b955050602086013567ffffffffffffffff81111561307857600080fd5b61308488828901612ea7565b9450945050604061309788828901612e33565b92505060606130a888828901612f76565b9150509295509295909350565b60008060008060008060a087890312156130ce57600080fd5b60006130dc89828a01612e33565b965050602087013567ffffffffffffffff8111156130f957600080fd5b61310589828a01612ea7565b9550955050604061311889828a01612e33565b935050606061312989828a01612f76565b925050608087013567ffffffffffffffff81111561314657600080fd5b61315289828a01612f30565b9150509295509295509295565b6000806040838503121561317257600080fd5b600061318085828601612e33565b925050602061319185828601612f4c565b9150509250929050565b600080600080604085870312156131b157600080fd5b600085013567ffffffffffffffff8111156131cb57600080fd5b6131d787828801612e5d565b9450945050602085013567ffffffffffffffff8111156131f657600080fd5b61320287828801612ea7565b925092505092959194509250565b60006020828403121561322257600080fd5b600082015167ffffffffffffffff81111561323c57600080fd5b61324884828501612ef1565b91505092915050565b60006020828403121561326357600080fd5b600061327184828501612f4c565b91505092915050565b60006020828403121561328c57600080fd5b600061329a84828501612f61565b91505092915050565b60006132af83836132ca565b60208301905092915050565b6132c481613ca1565b82525050565b6132d381613c8f565b82525050565b6132e281613c8f565b82525050565b60006132f382613abc565b6132fd8185613adf565b935061330883613aac565b8060005b8381101561333957815161332088826132a3565b975061332b83613ad2565b92505060018101905061330c565b5085935050505092915050565b60006133528385613af0565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561338157600080fd5b602083029250613392838584613d24565b82840190509392505050565b6133a781613cb3565b82525050565b60006133b882613ac7565b6133c28185613b01565b93506133d2818560208601613d33565b6133db81613e6d565b840191505092915050565b6133ef81613d00565b82525050565b6133fe81613cbf565b82525050565b60006134108385613b12565b935061341d838584613d24565b61342683613e6d565b840190509392505050565b600061343e601283613b23565b915061344982613e7e565b602082019050919050565b6000613461601c83613b23565b915061346c82613ea7565b602082019050919050565b6000613484601883613b23565b915061348f82613ed0565b602082019050919050565b60006134a7601a83613b23565b91506134b282613ef9565b602082019050919050565b60006134ca601383613b23565b91506134d582613f22565b602082019050919050565b60006134ed601583613b23565b91506134f882613f4b565b602082019050919050565b6000613510601d83613b23565b915061351b82613f74565b602082019050919050565b6000613533601a83613b23565b915061353e82613f9d565b602082019050919050565b6000613556601283613b23565b915061356182613fc6565b602082019050919050565b600061018083016135806000840184613bb9565b61358d60008601826136db565b5061359b6020840184613bb9565b6135a860208601826136db565b506135b66040840184613bb9565b6135c360408601826136db565b506135d16060840184613bb9565b6135de60608601826136db565b506135ec6080840184613b4b565b6135f960808601826133f5565b5061360760a0840184613b4b565b61361460a08601826133f5565b5061362260c0840184613b62565b85830360c0870152613635838284613404565b9250505061364660e0840184613b62565b85830360e0870152613659838284613404565b9250505061366b610100840184613b34565b6136796101008601826132ca565b50613688610120840184613b34565b6136966101208601826132ca565b506136a5610140840184613b34565b6136b36101408601826132ca565b506136c2610160840184613b34565b6136d06101608601826132ca565b508091505092915050565b6136e481613ce9565b82525050565b6136f381613ce9565b82525050565b61370281613cf3565b82525050565b600060208201905061371d60008301846132d9565b92915050565b600060408201905061373860008301856132bb565b61374560208301846136ea565b9392505050565b600060408201905061376160008301856132d9565b61376e60208301846132d9565b9392505050565b600060608201905061378a60008301866132d9565b61379760208301856132d9565b6137a460408301846136ea565b949350505050565b60006040820190506137c160008301856132d9565b81810360208301526137d381846133ad565b90509392505050565b60006040820190506137f160008301856132d9565b6137fe60208301846136ea565b9392505050565b6000602082019050818103600083015261381f81846132e8565b905092915050565b60006060820190508181036000830152613842818688613346565b905061385160208301856132d9565b61385e60408301846136f9565b95945050505050565b60006080820190508181036000830152613882818789613346565b905061389160208301866132d9565b61389e60408301856136f9565b81810360608301526138b0818461356c565b90509695505050505050565b60006020820190506138d1600083018461339e565b92915050565b60006020820190506138ec60008301846133e6565b92915050565b6000602082019050818103600083015261390b81613431565b9050919050565b6000602082019050818103600083015261392b81613454565b9050919050565b6000602082019050818103600083015261394b81613477565b9050919050565b6000602082019050818103600083015261396b8161349a565b9050919050565b6000602082019050818103600083015261398b816134bd565b9050919050565b600060208201905081810360008301526139ab816134e0565b9050919050565b600060208201905081810360008301526139cb81613503565b9050919050565b600060208201905081810360008301526139eb81613526565b9050919050565b60006020820190508181036000830152613a0b81613549565b9050919050565b6000602082019050613a2760008301846136ea565b92915050565b6000604082019050613a4260008301856136ea565b613a4f60208301846136ea565b9392505050565b6000613a60613a71565b9050613a6c8282613d66565b919050565b6000604051905090565b600067ffffffffffffffff821115613a9657613a95613e3e565b5b613a9f82613e6d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613b436020840184612e33565b905092915050565b6000613b5a6020840184612f1b565b905092915050565b60008083356001602003843603038112613b7b57600080fd5b83810192508235915060208301925067ffffffffffffffff821115613b9f57600080fd5b600182023603841315613bb157600080fd5b509250929050565b6000613bc86020840184612f4c565b905092915050565b6000613bdb82613ce9565b9150613be683613ce9565b925082613bf657613bf5613e0f565b5b828204905092915050565b6000613c0c82613ce9565b9150613c1783613ce9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c5057613c4f613de0565b5b828202905092915050565b6000613c6682613ce9565b9150613c7183613ce9565b925082821015613c8457613c83613de0565b5b828203905092915050565b6000613c9a82613cc9565b9050919050565b6000613cac82613cc9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613d0b82613d12565b9050919050565b6000613d1d82613cc9565b9050919050565b82818337600083830152505050565b60005b83811015613d51578082015181840152602081019050613d36565b83811115613d60576000848401525b50505050565b613d6f82613e6d565b810181811067ffffffffffffffff82111715613d8e57613d8d613e3e565b5b80604052505050565b6000613da282613ce9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613dd557613dd4613de0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f44464b4561726e3a206e6f742061646d696e0000000000000000000000000000600082015250565b7f44464b4561726e3a20696e737566666963656e742062616c616e636500000000600082015250565b7f44464b4561726e3a20696e76616c696420616464726573730000000000000000600082015250565b7f44464b4561726e3a20756e737570706f72746564207175657374000000000000600082015250565b7f44464b4561726e3a206e6f206163636f756e7400000000000000000000000000600082015250565b7f44464b4561726e3a206e6f74206f70657261746f720000000000000000000000600082015250565b7f44464b4561726e3a20696e73756666696369656e742062616c616e6365000000600082015250565b7f44464b4561726e3a206e6f742070656e64696e672061646d696e000000000000600082015250565b7f44464b4561726e3a206e6f74206f776e65720000000000000000000000000000600082015250565b613ff881613c8f565b811461400357600080fd5b50565b61400f81613cbf565b811461401a57600080fd5b50565b61402681613ce9565b811461403157600080fd5b50565b61403d81613cf3565b811461404857600080fd5b5056fea264697066735822122065305317d70e0049f5a33ff0cec35c2287184e1dfbbd5ede518c5cbf4fe50e0964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3911,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3913,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4867,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)3106_storage"
      },
      {
        "astId": 4871,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "supportedQuest",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4874,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "feePerHero",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4877,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "extraFeeThreshold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4880,
        "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
        "label": "extraFeeRate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3106_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3105,
            "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2805_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2805_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2800,
            "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2804,
            "contract": "contracts/dfkearn/DFKEarnQuest.sol:DFKEarnQuest",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}