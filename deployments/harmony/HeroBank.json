{
  "address": "0xE55923577ADB507B2410cFCA12336A15AcDE7c4E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxHeroCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_auctionHouse",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DFKHero",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userLoans",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "CollateralReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "HeroReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "HeroSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROW_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKHero",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_COLLATERAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_itemAddr",
          "type": "address"
        },
        {
          "internalType": "enum ItemType",
          "name": "_itemType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "approveItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionHouse",
      "outputs": [
        {
          "internalType": "contract AuctionHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_heroes",
          "type": "uint256[]"
        }
      ],
      "name": "borrowHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ItemType",
              "name": "itemType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Item",
          "name": "_item",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        }
      ],
      "name": "createAuctionAndBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowedHeroes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getHeroesOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "heroOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxHeroCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "setAuctionExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_heroId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setHeroOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxHeroCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxHeroCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLoans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_heroes",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawalHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad6b8d98b4e87c5a68c4e151959f7df979e3d5b9bdbbca25daed963c8a58566d",
  "receipt": {
    "to": null,
    "from": "0x0B1f506d4A9C0b1091bCAd24567C08fdCcaD2B64",
    "contractAddress": "0xE55923577ADB507B2410cFCA12336A15AcDE7c4E",
    "transactionIndex": 6,
    "gasUsed": "2533873",
    "logsBloom": "0x
    "blockHash": "0xfa6b79af4fac6550bbc3ca52a07ac0ef0af79dae02389202793e28b887308204",
    "transactionHash": "0xad6b8d98b4e87c5a68c4e151959f7df979e3d5b9bdbbca25daed963c8a58566d",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 27194816,
        "transactionHash": "0xad6b8d98b4e87c5a68c4e151959f7df979e3d5b9bdbbca25daed963c8a58566d",
        "address": "0xE55923577ADB507B2410cFCA12336A15AcDE7c4E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000b1f506d4a9c0b1091bcad24567c08fdccad2b64"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xfa6b79af4fac6550bbc3ca52a07ac0ef0af79dae02389202793e28b887308204"
      }
    ],
    "blockNumber": 27194816,
    "cumulativeGasUsed": "8796251",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000,
    "10000000000000000000000",
    "0xaE617f0519fc69112C1a6972eEb9B7D8144563c4",
    "0x5F753dcDf9b1AD9AabC1346614D1f4746fd6Ce5C"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd3139da9f713fc45f84c2e0577a58a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHeroCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_auctionHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DFKHero\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userLoans\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CollateralReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HeroReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HeroSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKHero\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddr\",\"type\":\"address\"},{\"internalType\":\"enum ItemType\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract AuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_heroes\",\"type\":\"uint256[]\"}],\"name\":\"borrowHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Item\",\"name\":\"_item\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"createAuctionAndBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowedHeroes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getHeroesOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHeroCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"setAuctionExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_heroId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setHeroOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxHeroCount\",\"type\":\"uint256\"}],\"name\":\"setMaxHeroCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLoans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_heroes\",\"type\":\"uint256[]\"}],\"name\":\"withdrawalHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HeroBank.sol\":\"HeroBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/AuctionHouse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Market.sol\\\";\\n\\ncontract AuctionHouse is Market {\\n    enum AuctionStatus { None, Created, Cancelled, Bidding, Completed }\\n    struct Auction {\\n        address creator;\\n        address bidder;\\n        Item item;\\n        uint minPrice;\\n        uint currentPrice;\\n        uint expiration;\\n        uint deadline;\\n        uint commission;\\n        AuctionStatus status;\\n    }\\n\\n    uint public tickSize;\\n    uint public minExpiration;\\n    uint public maxExpiration;\\n\\n    uint public numAuctions;\\n    mapping(uint => Auction) public auctions;\\n\\n    event Created(uint indexed id, address indexed creator);\\n    event MinPriceChanged(uint indexed id);\\n    event Cancelled(uint indexed id);\\n    event NewBidder(uint indexed id, address bidder);\\n    event Completed(uint indexed id, address winner);\\n\\n    constructor(\\n        address _money,\\n        uint _commission,\\n        uint _tickSize\\n    )\\n        Market(_money, _commission)\\n    {\\n        tickSize = _tickSize;\\n        minExpiration = 1 hours;\\n        maxExpiration = 10 days;\\n    }\\n\\n    function create(\\n        Item calldata _item,\\n        uint _minPrice,\\n        uint _expiration\\n    )\\n        external\\n        whenNotPaused\\n        returns (uint id)\\n    {\\n        uint minPrice = roundDownPrice(_minPrice);\\n        require(minPrice > 0, \\\"AuctionHouse: zero minPrice\\\");\\n        require(\\n            _expiration >= minExpiration && _expiration <= maxExpiration,\\n            \\\"AuctionHouse: invalid expiration\\\"\\n        );\\n\\n        address creator = msg.sender;\\n        transferItem(creator, address(this), _item);\\n        id = ++numAuctions;\\n        auctions[id] = Auction({\\n            creator: creator,\\n            bidder: address(0),\\n            item: _item,\\n            minPrice: minPrice,\\n            currentPrice: 0,\\n            expiration: _expiration,\\n            deadline: 0,\\n            commission: commission,\\n            status: AuctionStatus.Created\\n        });\\n        emit Created(id, creator);\\n    }\\n\\n    function cancel(uint _id) external {\\n        Auction memory auction = auctions[_id];\\n        require(auction.status == AuctionStatus.Created, \\\"AuctionHouse: invalid auction status\\\");\\n        address creator = msg.sender;\\n        require(auction.creator == creator, \\\"AuctionHouse: not creator\\\");\\n        transferItem(address(this), creator, auction.item);\\n        auctions[_id].status = AuctionStatus.Cancelled;\\n        emit Cancelled(_id);\\n    }\\n\\n    function changeMinPrice(uint _id, uint _minPrice) external {\\n        uint minPrice = roundDownPrice(_minPrice);\\n        require(minPrice > 0, \\\"AuctionHouse: zero minPrice\\\");\\n        address creator = msg.sender;\\n        Auction memory auction = auctions[_id];\\n        require(auction.status == AuctionStatus.Created, \\\"AuctionHouse: invalid offer status\\\");\\n        require(auction.creator == creator, \\\"AuctionHouse: not creator\\\");\\n        auctions[_id].minPrice = minPrice;\\n        emit MinPriceChanged(_id);\\n    }\\n\\n    function bid(uint256 _id, uint256 _price, address _beneficiary) external {\\n        require(isAuctionActive(_id), \\\"AuctionHouse: auction not active\\\");\\n        Auction memory auction = auctions[_id];\\n        address committer = msg.sender;\\n        address bidder = msg.sender;\\n        if (_beneficiary != address(0)) {\\n            bidder = _beneficiary;\\n        }\\n\\n        uint price = roundDownPrice(_price);\\n        if (auction.status == AuctionStatus.Created) {\\n            require(price >= auction.minPrice, \\\"AuctionHouse: invalid price\\\");\\n        } else {\\n            require(price > auction.currentPrice, \\\"AuctionHouse: invalid price\\\");\\n            transferMoney(address(this), auction.bidder, auction.currentPrice);\\n        }\\n\\n        transferMoney(committer, address(this), price);\\n        auctions[_id].bidder = bidder;\\n        auctions[_id].currentPrice = price;\\n        auctions[_id].deadline = block.timestamp + auction.expiration;\\n        auctions[_id].status = AuctionStatus.Bidding;\\n        emit NewBidder(_id, bidder);\\n    }\\n\\n    function complete(uint _id) external {\\n        require(isAuctionEnd(_id), \\\"AuctionHouse: auction not end\\\");\\n        Auction memory auction = auctions[_id];\\n        uint finalPrice = auction.currentPrice;\\n        uint fee = finalPrice * auction.commission / 10000;\\n        transferMoney(address(this), owner(), fee);\\n        transferMoney(address(this), auction.creator, finalPrice - fee);\\n        transferItem(address(this), auction.bidder, auction.item);\\n        auctions[_id].status = AuctionStatus.Completed;\\n        emit Completed(_id, auction.bidder);\\n    }\\n\\n    function setTickSize(uint _tickSize) external onlyOwner {\\n        tickSize = _tickSize;\\n    }\\n\\n    function setMinExpiration(uint _minExpiration) external onlyOwner {\\n        minExpiration = _minExpiration;\\n    }\\n\\n    function setMaxExpiration(uint _maxExpiration) external onlyOwner {\\n        maxExpiration = _maxExpiration;\\n    }\\n\\n    function isAuctionActive(uint _id) public view returns (bool) {\\n        Auction memory auction = auctions[_id];\\n        return (auction.status == AuctionStatus.Created) ||\\n            (auction.status == AuctionStatus.Bidding && block.timestamp <= auction.deadline);\\n    }\\n\\n    function isAuctionEnd(uint _id) public view returns (bool) {\\n        Auction memory auction = auctions[_id];\\n        return auction.status == AuctionStatus.Bidding && block.timestamp > auction.deadline;\\n    }\\n\\n    function roundDownPrice(uint _price) private view returns (uint) {\\n        return _price / tickSize * tickSize;\\n    }\\n}\\n\",\"keccak256\":\"0x7299104b96d492aad056e1c797b88e8d2d874a8175e0358a902d9346e5e90e38\",\"license\":\"MIT\"},\"contracts/HeroBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./AuctionHouse.sol\\\";\\n\\ncontract HeroBank is Ownable, Pausable, IERC721Receiver, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    address public immutable DFKHero;\\n    uint public immutable MIN_COLLATERAL;\\n    uint public constant BORROW_LIMIT = 6;\\n\\n    AuctionHouse public auctionHouse;\\n    uint public auctionExpiration;\\n\\n    address public operator;\\n\\n    uint public maxHeroCount;\\n    // current hero count in bank\\n    uint numHeroes;\\n    // heroId to hero owner address\\n    mapping(uint256 => address) public heroOwners;\\n    // owner address to heroId set\\n    mapping(address => EnumerableSet.UintSet) ownedHeroes;\\n\\n    uint numBorrows;\\n    uint[BORROW_LIMIT] borrowedHeroes;\\n\\n    // Mapping from user address to borrow count\\n    mapping(address => uint) public userLoans;\\n    uint public totalLoans;\\n\\n    event CollateralReceived(address sender, uint256 value);\\n    event HeroReceived(address indexed from, uint256 tokenId);\\n    event HeroSent(address indexed to, uint256 tokenId);\\n    event OperatorChanged(address newOperator, address oldOperator);\\n    event Claim(address indexed user, uint256 userLoans, uint256 totalLoans);\\n\\n    constructor(\\n        uint _maxHeroCount,\\n        uint _minCollateral,\\n        address _auctionHouse,\\n        address _DFKHero\\n    ) {\\n        maxHeroCount = _maxHeroCount;\\n        MIN_COLLATERAL = _minCollateral;\\n        auctionHouse = AuctionHouse(_auctionHouse);\\n        auctionExpiration = 1 days;\\n        DFKHero = _DFKHero;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"HeroBank: not operator\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit CollateralReceived(msg.sender, msg.value);\\n    }\\n\\n    function onERC721Received(\\n        address /* _operator */,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata /* _data */\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        returns (bytes4)\\n    {\\n        if (msg.sender == DFKHero) {\\n            assert(heroOwners[_tokenId] == address(0));\\n            require(numHeroes <= maxHeroCount, \\\"HeroBank: exceed maxHeroCount\\\");\\n            onHeroReceived(_tokenId, _from);\\n        }\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function withdrawalHeroes(uint[] calldata _heroes) external {\\n        for (uint i = 0; i < _heroes.length; i++) {\\n            uint heroId = _heroes[i];\\n            address heroOwner = heroOwners[heroId];\\n            require(msg.sender == heroOwner, \\\"HeroBank: not hero owner\\\");\\n            IERC721(DFKHero).safeTransferFrom(address(this), heroOwner, heroId);\\n            onHeroSent(heroId, heroOwner);\\n        }\\n    }\\n\\n    function createAuctionAndBid(Item calldata _item, uint256 _initialPrice) external {\\n        transferMoney(msg.sender, address(this), _initialPrice);\\n        uint auctionId = auctionHouse.create(_item, _initialPrice, auctionExpiration);\\n        auctionHouse.money().approve(address(auctionHouse), _initialPrice);\\n        auctionHouse.bid(auctionId, _initialPrice, msg.sender);\\n    }\\n\\n    function getClaimable(address user) public view returns (uint256) {\\n        return getBalance() * userLoans[user] / totalLoans;\\n    }\\n\\n    function claim() external {\\n        uint claimable = getClaimable(msg.sender);\\n        require(claimable > 0, \\\"HeroBank: no claimable\\\");\\n        uint count = userLoans[msg.sender];\\n        userLoans[msg.sender] = 0;\\n        totalLoans -= count;\\n        transferMoney(address(this), msg.sender, claimable);\\n        emit Claim(msg.sender, count, totalLoans);\\n    }\\n\\n    function borrowHeroes(uint[] memory _heroes) external onlyOperator {\\n        require(numBorrows == 0, \\\"HeroBank: unreturned heroes\\\");\\n        require(_heroes.length <= BORROW_LIMIT, \\\"HeroBank: exceed BORROW_LIMIT\\\");\\n        require(address(this).balance >= MIN_COLLATERAL, \\\"HeroBank: not enough margin\\\");\\n        for (uint i = 0; i < _heroes.length; i++) {\\n            borrowedHeroes[i] = _heroes[i];\\n            IERC721(DFKHero).transferFrom(address(this), operator, _heroes[i]);\\n        }\\n        numBorrows = _heroes.length;\\n    }\\n\\n    function repayHeroes() external onlyOperator {\\n        require(numBorrows > 0, \\\"HeroBank: no borrowed hero\\\");\\n        for (uint i = 0; i < numBorrows; i++) {\\n            uint heroId = borrowedHeroes[i];\\n            IERC721(DFKHero).transferFrom(operator, address(this), heroId);\\n            address heroOwner = heroOwners[heroId];\\n            userLoans[heroOwner] += 1;\\n            totalLoans += 1;\\n        }\\n        numBorrows = 0;\\n    }\\n\\n    function withdrawalCollateral() external onlyOwner {\\n        require(numBorrows == 0, \\\"HeroBank: unreturned heroes\\\");\\n        Address.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    function setHeroOwner(uint _heroId, address _owner) external onlyOwner {\\n        require(IERC721(DFKHero).ownerOf(_heroId) == address(this), \\\"HeroBank: not found\\\");\\n        require(heroOwners[_heroId] == address(0), \\\"HeroBank: already owned\\\");\\n        onHeroReceived(_heroId, _owner);\\n    }\\n\\n    function setAuctionExpiration(uint _expiration) external onlyOwner {\\n        auctionExpiration = _expiration;\\n    }\\n\\n    function setMaxHeroCount(uint _maxHeroCount) external onlyOwner {\\n        maxHeroCount = _maxHeroCount;\\n    }\\n\\n    function setOperator(address _operator) external onlyOwner {\\n        address oldOperator = operator;\\n        operator = _operator;\\n        emit OperatorChanged(operator, oldOperator);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function approveItem(\\n        address _itemAddr,\\n        ItemType _itemType,\\n        bool _approved\\n    )\\n        external\\n        onlyOwner\\n    {\\n        if (_itemType == ItemType.ERC20) {\\n            uint amount = _approved ? type(uint).max : 0;\\n            IERC20(_itemAddr).approve(address(auctionHouse), amount);\\n        } else if (_itemType == ItemType.ERC721) {\\n            IERC721(_itemAddr).setApprovalForAll(address(auctionHouse), _approved);\\n        } else if (_itemType == ItemType.ERC1155) {\\n            IERC1155(_itemAddr).setApprovalForAll(address(auctionHouse), _approved);\\n        }\\n    }\\n\\n    function getBorrowedHeroes() public view returns (uint[] memory) {\\n        uint[] memory result = new uint[](numBorrows);\\n        for (uint i = 0; i < numBorrows; i++) {\\n            result[i] = borrowedHeroes[i];\\n        }\\n        return result;\\n    }\\n\\n    function getHeroesOfOwner(address _owner) public view returns (uint[] memory) {\\n        EnumerableSet.UintSet storage heroes = ownedHeroes[_owner];\\n        uint length = heroes.length();\\n        uint[] memory result = new uint[](length);\\n        for (uint i = 0; i < length; i++) {\\n            result[i] = heroes.at(i);\\n        }\\n        return result;\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return auctionHouse.money().balanceOf(address(this));\\n    }\\n\\n    function onHeroReceived(uint _heroId, address _owner) private {\\n        heroOwners[_heroId] = _owner;\\n        ownedHeroes[_owner].add(_heroId);\\n        numHeroes++;\\n        emit HeroReceived(_owner, _heroId);\\n    }\\n\\n    function onHeroSent(uint _heroId, address _owner) private {\\n        delete heroOwners[_heroId];\\n        ownedHeroes[_owner].remove(_heroId);\\n        numHeroes--;\\n        emit HeroSent(_owner, _heroId);\\n    }\\n\\n    function transferMoney(address _from, address _to, uint _amount) private {\\n        if (_from == address(this)) {\\n            auctionHouse.money().safeTransfer(_to, _amount);\\n        } else {\\n            auctionHouse.money().safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x45929ef6ce1b3aa5dbec745eefbb8a06b6999c29795beafd774869faf81bb6a8\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nenum ItemType { ERC20, ERC721, ERC1155 }\\nstruct Item {\\n    ItemType itemType;\\n    address addr;\\n    uint[] amounts;\\n    uint[] ids;\\n}\\n\\ncontract Market is Ownable, Pausable, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable money;\\n\\n    uint public commission; // in bps\\n\\n    event CommissionChanged(uint newCommission, uint oldCommission);\\n\\n    constructor(address _money, uint _commission) {\\n        money = IERC20(_money);\\n        commission = _commission;\\n    }\\n\\n    function setComission(uint _commission) external onlyOwner {\\n        uint oldCommission = commission;\\n        commission = _commission;\\n        emit CommissionChanged(commission, oldCommission);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function transferItem(address _from, address _to, Item memory _item) internal {\\n        if (_item.itemType == ItemType.ERC721) {\\n            require(_item.ids.length > 0, \\\"Market: zero ids.length\\\");\\n            for (uint i = 0; i < _item.ids.length; i++) {\\n                IERC721(_item.addr).safeTransferFrom(_from, _to, _item.ids[i]);\\n            }\\n        } else if (_item.itemType == ItemType.ERC1155) {\\n            require(_item.ids.length > 0, \\\"Market: zero ids.length\\\");\\n            require(\\n                _item.ids.length == _item.amounts.length,\\n                \\\"Market: ids.length and amounts.length are not equal\\\"\\n            );\\n            for (uint i = 0; i < _item.ids.length; i++) {\\n                require(_item.amounts[i] > 0, \\\"Market: zero amount\\\");\\n                IERC1155(_item.addr).safeTransferFrom(_from, _to, _item.ids[i], _item.amounts[i], \\\"\\\");\\n            }\\n        } else if (_item.itemType == ItemType.ERC20) {\\n            require(_item.amounts.length > 0, \\\"Market: zero amounts.length\\\");\\n            require(_item.amounts[0] > 0, \\\"Market: zero amount\\\");\\n            safeTransferERC20(_item.addr, _from, _to, _item.amounts[0]);\\n        } else {\\n            revert(\\\"Market: unsupported itemType\\\");\\n        }\\n    }\\n\\n    function transferMoney(address _from, address _to, uint _amount) internal {\\n        safeTransferERC20(address(money), _from, _to, _amount);\\n    }\\n\\n    function safeTransferERC20(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint _amount\\n    )\\n        private\\n    {\\n        if (_from == address(this)) {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x674e6aeef28f9142c9d892ac1d8ec3ea68e25f709d74a3085615cd9f4b51edc0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002ce638038062002ce6833981016040819052620000349162000101565b6200003f3362000094565b6000805460ff60a01b1916905560049390935560a091909152600180546001600160a01b0319166001600160a01b039092169190911790556201518060025560601b6001600160601b0319166080526200014c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000fc57600080fd5b919050565b600080600080608085870312156200011857600080fd5b84519350602085015192506200013160408601620000e4565b91506200014160608601620000e4565b905092959194509250565b60805160601c60a051612b476200019f600039600081816106cc01526113b80152600081816103c7015281816108b101528181610a5201528181610bb30152818161123701526114700152612b476000f3fe6080604052600436106102085760003560e01c80639395be7811610118578063e46a7b9e116100a0578063f0d3b3961161006f578063f0d3b39614610638578063f23a6e6114610658578063f2fde38b14610684578063f8d6e9a3146106a4578063fa779648146106ba57600080fd5b8063e46a7b9e14610595578063e9e190a3146105cb578063ed9152c8146105f8578063ef6ef0fa1461061857600080fd5b8063bc197c81116100e7578063bc197c81146104f1578063c420f4f71461051d578063c8dfeb5e1461053d578063cc952b571461055d578063dfa816391461057357600080fd5b80639395be781461047c5780639e79d42b14610491578063a583024b146104b1578063b3ab15fb146104d157600080fd5b8063570ca7351161019b578063715018a61161016a578063715018a6146103ff5780637308704a146104145780638456cb59146104345780638da5cb5b146104495780639049073d1461046757600080fd5b8063570ca7351461035e5780635c975abb146103965780635d38c695146103b557806368c6bc30146103e957600080fd5b80633200ebd8116101d75780633200ebd8146102ff5780633f4ba83a1461031457806341e97c82146103295780634e71d92d1461034957600080fd5b806301ffc9a71461024c578063110702651461028157806312065fe0146102a3578063150b7a02146102c657600080fd5b3661024757604080513381523460208201527f714e0435d2ea0faa514ce7b66a98a00d2fabc02143213310adf29f3d43687aaa910160405180910390a1005b600080fd5b34801561025857600080fd5b5061026c610267366004612677565b6106ee565b60405190151581526020015b60405180910390f35b34801561028d57600080fd5b506102a161029c3660046126eb565b610725565b005b3480156102af57600080fd5b506102b861075d565b604051908152602001610278565b3480156102d257600080fd5b506102e66102e136600461245f565b610858565b6040516001600160e01b03199091168152602001610278565b34801561030b57600080fd5b506102a161096c565b34801561032057600080fd5b506102a1610b35565b34801561033557600080fd5b506102a161034436600461271d565b610b69565b34801561035557600080fd5b506102a1610cec565b34801561036a57600080fd5b5060035461037e906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b3480156103a257600080fd5b50600054600160a01b900460ff1661026c565b3480156103c157600080fd5b5061037e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f557600080fd5b506102b860045481565b34801561040b57600080fd5b506102a1610dc3565b34801561042057600080fd5b506102a161042f366004612567565b610df7565b34801561044057600080fd5b506102a1610fd1565b34801561045557600080fd5b506000546001600160a01b031661037e565b34801561047357600080fd5b506102a1611003565b34801561048857600080fd5b506102b8600681565b34801561049d57600080fd5b506102a16104ac3660046126eb565b611098565b3480156104bd57600080fd5b506102b86104cc366004612377565b6110c7565b3480156104dd57600080fd5b506102a16104ec366004612377565b611102565b3480156104fd57600080fd5b506102e661050c3660046123b1565b63bc197c8160e01b95945050505050565b34801561052957600080fd5b506102a16105383660046125b0565b61118b565b34801561054957600080fd5b506102a1610558366004612625565b6112c1565b34801561056957600080fd5b506102b860105481565b34801561057f57600080fd5b50610588611523565b60405161027891906127c3565b3480156105a157600080fd5b5061037e6105b03660046126eb565b6006602052600090815260409020546001600160a01b031681565b3480156105d757600080fd5b506102b86105e6366004612377565b600f6020526000908152604090205481565b34801561060457600080fd5b5060015461037e906001600160a01b031681565b34801561062457600080fd5b50610588610633366004612377565b6115c5565b34801561064457600080fd5b506102a16106533660046126a1565b61167f565b34801561066457600080fd5b506102e66106733660046124fe565b63f23a6e6160e01b95945050505050565b34801561069057600080fd5b506102a161069f366004612377565b61185f565b3480156106b057600080fd5b506102b860025481565b3480156106c657600080fd5b506102b87f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216630271189760e51b148061071f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146107585760405162461bcd60e51b815260040161074f9061283a565b60405180910390fd5b600455565b600154604080516326ee884560e11b815290516000926001600160a01b031691634ddd108a916004808301926020929190829003018186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612394565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190612704565b905090565b60008054600160a01b900460ff16156108a65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161074f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561095a576000848152600660205260409020546001600160a01b0316156108fc576108fc612a6a565b60045460055411156109505760405162461bcd60e51b815260206004820152601d60248201527f4865726f42616e6b3a20657863656564206d61784865726f436f756e74000000604482015260640161074f565b61095a84866118fa565b50630a85bd0160e11b95945050505050565b6003546001600160a01b031633146109bf5760405162461bcd60e51b81526020600482015260166024820152752432b937a130b7359d103737ba1037b832b930ba37b960511b604482015260640161074f565b600060085411610a115760405162461bcd60e51b815260206004820152601a60248201527f4865726f42616e6b3a206e6f20626f72726f776564206865726f000000000000604482015260640161074f565b60005b600854811015610b2d57600060098260068110610a3357610a33612ac2565b01546003546040516323b872dd60e01b81529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd92610a8c9216903090869060040161279f565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b5050506000828152600660209081526040808320546001600160a01b0316808452600f909252822080549193506001929091610af790849061299c565b92505081905550600160106000828254610b11919061299c565b9250508190555050508080610b2590612a4f565b915050610a14565b506000600855565b6000546001600160a01b03163314610b5f5760405162461bcd60e51b815260040161074f9061283a565b610b6761198b565b565b6000546001600160a01b03163314610b935760405162461bcd60e51b815260040161074f9061283a565b6040516331a9108f60e11b81526004810183905230906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b158015610bf557600080fd5b505afa158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612394565b6001600160a01b031614610c795760405162461bcd60e51b815260206004820152601360248201527212195c9bd0985b9ace881b9bdd08199bdd5b99606a1b604482015260640161074f565b6000828152600660205260409020546001600160a01b031615610cde5760405162461bcd60e51b815260206004820152601760248201527f4865726f42616e6b3a20616c7265616479206f776e6564000000000000000000604482015260640161074f565b610ce882826118fa565b5050565b6000610cf7336110c7565b905060008111610d425760405162461bcd60e51b81526020600482015260166024820152754865726f42616e6b3a206e6f20636c61696d61626c6560501b604482015260640161074f565b336000908152600f602052604081208054908290556010805491928392610d6a9084906129f5565b90915550610d7b9050303384611a28565b60105460405133917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf791610db791858252602082015260400190565b60405180910390a25050565b6000546001600160a01b03163314610ded5760405162461bcd60e51b815260040161074f9061283a565b610b676000611b71565b6000546001600160a01b03163314610e215760405162461bcd60e51b815260040161074f9061283a565b6000826002811115610e3557610e35612a96565b1415610edc57600081610e49576000610e4d565b6000195b60015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925085169063095ea7b390604401602060405180830381600087803b158015610e9d57600080fd5b505af1158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed5919061265a565b5050505050565b6001826002811115610ef057610ef0612a96565b1415610f635760015460405163a22cb46560e01b81526001600160a01b03918216600482015282151560248201529084169063a22cb465906044015b600060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b50505050505050565b6002826002811115610f7757610f77612a96565b1415610fcc5760015460405163a22cb46560e01b81526001600160a01b03918216600482015282151560248201529084169063a22cb46590604401600060405180830381600087803b158015610f4657600080fd5b505050565b6000546001600160a01b03163314610ffb5760405162461bcd60e51b815260040161074f9061283a565b610b67611bc1565b6000546001600160a01b0316331461102d5760405162461bcd60e51b815260040161074f9061283a565b6008541561107d5760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a20756e72657475726e6564206865726f65730000000000604482015260640161074f565b610b676110926000546001600160a01b031690565b47611c49565b6000546001600160a01b031633146110c25760405162461bcd60e51b815260040161074f9061283a565b600255565b6010546001600160a01b0382166000908152600f60205260408120549091906110ee61075d565b6110f891906129d6565b61071f91906129b4565b6000546001600160a01b0316331461112c5760405162461bcd60e51b815260040161074f9061283a565b600380546001600160a01b038381166001600160a01b03198316811790935560408051938452911660208301819052917fd58299b712891143e76310d5e664c4203c940a67db37cf856bdaa3c5c76a802c910160405180910390a15050565b60005b81811015610fcc5760008383838181106111aa576111aa612ac2565b6020908102929092013560008181526006909352604090922054919250506001600160a01b03163381146112205760405162461bcd60e51b815260206004820152601860248201527f4865726f42616e6b3a206e6f74206865726f206f776e65720000000000000000604482015260640161074f565b604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342842e0e906112709030908590879060040161279f565b600060405180830381600087803b15801561128a57600080fd5b505af115801561129e573d6000803e3d6000fd5b505050506112ac8282611d62565b505080806112b990612a4f565b91505061118e565b6003546001600160a01b031633146113145760405162461bcd60e51b81526020600482015260166024820152752432b937a130b7359d103737ba1037b832b930ba37b960511b604482015260640161074f565b600854156113645760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a20756e72657475726e6564206865726f65730000000000604482015260640161074f565b6006815111156113b65760405162461bcd60e51b815260206004820152601d60248201527f4865726f42616e6b3a2065786365656420424f52524f575f4c494d4954000000604482015260640161074f565b7f00000000000000000000000000000000000000000000000000000000000000004710156114265760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a206e6f7420656e6f756768206d617267696e0000000000604482015260640161074f565b60005b815181101561151c5781818151811061144457611444612ac2565b60200260200101516009826006811061145f5761145f612ac2565b015560035482516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd92309291909116908690869081106114b1576114b1612ac2565b60200260200101516040518463ffffffff1660e01b81526004016114d79392919061279f565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b50505050808061151490612a4f565b915050611429565b5051600855565b6060600060085467ffffffffffffffff81111561154257611542612ad8565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b50905060005b6008548110156115bf576009816006811061158e5761158e612ac2565b01548282815181106115a2576115a2612ac2565b6020908102919091010152806115b781612a4f565b915050611571565b50919050565b6001600160a01b03811660009081526007602052604081206060916115e982611def565b905060008167ffffffffffffffff81111561160657611606612ad8565b60405190808252806020026020018201604052801561162f578160200160208202803683370190505b50905060005b82811015611676576116478482611df9565b82828151811061165957611659612ac2565b60209081029190910101528061166e81612a4f565b915050611635565b50949350505050565b61168a333083611a28565b60015460025460405163bc51fbd360e01b81526000926001600160a01b03169163bc51fbd3916116c191879187919060040161286f565b602060405180830381600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190612704565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176357600080fd5b505afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612394565b60015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156117e857600080fd5b505af11580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611820919061265a565b50600154604051630742f0a960e41b815260048101839052602481018490523360448201526001600160a01b039091169063742f0a9090606401610f2c565b6000546001600160a01b031633146118895760405162461bcd60e51b815260040161074f9061283a565b6001600160a01b0381166118ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161074f565b6118f781611b71565b50565b600082815260066020908152604080832080546001600160a01b0319166001600160a01b03861690811790915583526007909152902061193a9083611e0c565b506005805490600061194b83612a4f565b9190505550806001600160a01b03167ff4dc75d25e9acb36512fa1f87cb7119b935da57bedfa0b72d2ed267cb71a136b83604051610db791815260200190565b600054600160a01b900460ff166119db5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161074f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316301415611ad457610fcc8282600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190612394565b6001600160a01b03169190611e18565b610fcc838383600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612394565b6001600160a01b0316929190611e7b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615611c0e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161074f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a0b3390565b80471015611c995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161074f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ce6576040519150601f19603f3d011682016040523d82523d6000602084013e611ceb565b606091505b5050905080610fcc5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161074f565b600082815260066020908152604080832080546001600160a01b03191690556001600160a01b038416835260079091529020611d9e9083611ea2565b5060058054906000611daf83612a38565b9190505550806001600160a01b03167f4bf5d1b07686e0a2b1d9d1cc5d4a7db29045845488485a527798e52d1f993e3083604051610db791815260200190565b600061071f825490565b6000611e058383611eae565b9392505050565b6000611e058383611ed8565b6040516001600160a01b038316602482015260448101829052610fcc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f27565b611e9c846323b872dd60e01b858585604051602401611e449392919061279f565b50505050565b6000611e058383611ff9565b6000826000018281548110611ec557611ec5612ac2565b9060005260206000200154905092915050565b6000818152600183016020526040812054611f1f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561071f565b50600061071f565b6000611f7c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120ec9092919063ffffffff16565b805190915015610fcc5780806020019051810190611f9a919061265a565b610fcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074f565b600081815260018301602052604081205480156120e257600061201d6001836129f5565b8554909150600090612031906001906129f5565b905081811461209657600086600001828154811061205157612051612ac2565b906000526020600020015490508087600001848154811061207457612074612ac2565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120a7576120a7612aac565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061071f565b600091505061071f565b60606120fb8484600085612103565b949350505050565b6060824710156121645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161074f565b6001600160a01b0385163b6121bb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074f565b600080866001600160a01b031685876040516121d79190612783565b60006040518083038185875af1925050503d8060008114612214576040519150601f19603f3d011682016040523d82523d6000602084013e612219565b606091505b5091509150612229828286612234565b979650505050505050565b60608315612243575081611e05565b8251156122535782518084602001fd5b8160405162461bcd60e51b815260040161074f9190612807565b600082601f83011261227e57600080fd5b8135602067ffffffffffffffff82111561229a5761229a612ad8565b8160051b6122a982820161291b565b8381528281019086840183880185018910156122c457600080fd5b600093505b858410156122e75780358352600193909301929184019184016122c9565b50979650505050505050565b600082601f83011261230457600080fd5b813567ffffffffffffffff81111561231e5761231e612ad8565b612331601f8201601f191660200161291b565b81815284602083860101111561234657600080fd5b816020850160208301376000918101602001919091529392505050565b80356003811061237257600080fd5b919050565b60006020828403121561238957600080fd5b8135611e0581612aee565b6000602082840312156123a657600080fd5b8151611e0581612aee565b600080600080600060a086880312156123c957600080fd5b85356123d481612aee565b945060208601356123e481612aee565b9350604086013567ffffffffffffffff8082111561240157600080fd5b61240d89838a0161226d565b9450606088013591508082111561242357600080fd5b61242f89838a0161226d565b9350608088013591508082111561244557600080fd5b50612452888289016122f3565b9150509295509295909350565b60008060008060006080868803121561247757600080fd5b853561248281612aee565b9450602086013561249281612aee565b935060408601359250606086013567ffffffffffffffff808211156124b657600080fd5b818801915088601f8301126124ca57600080fd5b8135818111156124d957600080fd5b8960208285010111156124eb57600080fd5b9699959850939650602001949392505050565b600080600080600060a0868803121561251657600080fd5b853561252181612aee565b9450602086013561253181612aee565b93506040860135925060608601359150608086013567ffffffffffffffff81111561255b57600080fd5b612452888289016122f3565b60008060006060848603121561257c57600080fd5b833561258781612aee565b925061259560208501612363565b915060408401356125a581612b03565b809150509250925092565b600080602083850312156125c357600080fd5b823567ffffffffffffffff808211156125db57600080fd5b818501915085601f8301126125ef57600080fd5b8135818111156125fe57600080fd5b8660208260051b850101111561261357600080fd5b60209290920196919550909350505050565b60006020828403121561263757600080fd5b813567ffffffffffffffff81111561264e57600080fd5b6120fb8482850161226d565b60006020828403121561266c57600080fd5b8151611e0581612b03565b60006020828403121561268957600080fd5b81356001600160e01b031981168114611e0557600080fd5b600080604083850312156126b457600080fd5b823567ffffffffffffffff8111156126cb57600080fd5b8301608081860312156126dd57600080fd5b946020939093013593505050565b6000602082840312156126fd57600080fd5b5035919050565b60006020828403121561271657600080fd5b5051919050565b6000806040838503121561273057600080fd5b82359150602083013561274281612aee565b809150509250929050565b81835260006001600160fb1b0383111561276657600080fd5b8260051b8083602087013760009401602001938452509192915050565b60008251612795818460208701612a0c565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156127fb578351835292840192918401916001016127df565b50909695505050505050565b6020815260008251806020840152612826816040850160208701612a0c565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60608152600061287e85612363565b6003811061289c57634e487b7160e01b600052602160045260246000fd5b606083015260208501356128af81612aee565b6001600160a01b031660808301526128ca604086018661294c565b608060a08501526128df60e08501828461274d565b9150506128ef606087018761294c565b848303605f190160c086015261290683828461274d565b60208601979097525050505060400152919050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561294457612944612ad8565b604052919050565b6000808335601e1984360301811261296357600080fd5b830160208101925035905067ffffffffffffffff81111561298357600080fd5b8060051b360383131561299557600080fd5b9250929050565b600082198211156129af576129af612a80565b500190565b6000826129d157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156129f0576129f0612a80565b500290565b600082821015612a0757612a07612a80565b500390565b60005b83811015612a27578181015183820152602001612a0f565b83811115611e9c5750506000910152565b600081612a4757612a47612a80565b506000190190565b6000600019821415612a6357612a63612a80565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118f757600080fd5b80151581146118f757600080fdfea2646970667358221220ece95d7b47f4f387c58bede76798f9ebde3a8aaa126f0a41536aa6021079e7cd64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c80639395be7811610118578063e46a7b9e116100a0578063f0d3b3961161006f578063f0d3b39614610638578063f23a6e6114610658578063f2fde38b14610684578063f8d6e9a3146106a4578063fa779648146106ba57600080fd5b8063e46a7b9e14610595578063e9e190a3146105cb578063ed9152c8146105f8578063ef6ef0fa1461061857600080fd5b8063bc197c81116100e7578063bc197c81146104f1578063c420f4f71461051d578063c8dfeb5e1461053d578063cc952b571461055d578063dfa816391461057357600080fd5b80639395be781461047c5780639e79d42b14610491578063a583024b146104b1578063b3ab15fb146104d157600080fd5b8063570ca7351161019b578063715018a61161016a578063715018a6146103ff5780637308704a146104145780638456cb59146104345780638da5cb5b146104495780639049073d1461046757600080fd5b8063570ca7351461035e5780635c975abb146103965780635d38c695146103b557806368c6bc30146103e957600080fd5b80633200ebd8116101d75780633200ebd8146102ff5780633f4ba83a1461031457806341e97c82146103295780634e71d92d1461034957600080fd5b806301ffc9a71461024c578063110702651461028157806312065fe0146102a3578063150b7a02146102c657600080fd5b3661024757604080513381523460208201527f714e0435d2ea0faa514ce7b66a98a00d2fabc02143213310adf29f3d43687aaa910160405180910390a1005b600080fd5b34801561025857600080fd5b5061026c610267366004612677565b6106ee565b60405190151581526020015b60405180910390f35b34801561028d57600080fd5b506102a161029c3660046126eb565b610725565b005b3480156102af57600080fd5b506102b861075d565b604051908152602001610278565b3480156102d257600080fd5b506102e66102e136600461245f565b610858565b6040516001600160e01b03199091168152602001610278565b34801561030b57600080fd5b506102a161096c565b34801561032057600080fd5b506102a1610b35565b34801561033557600080fd5b506102a161034436600461271d565b610b69565b34801561035557600080fd5b506102a1610cec565b34801561036a57600080fd5b5060035461037e906001600160a01b031681565b6040516001600160a01b039091168152602001610278565b3480156103a257600080fd5b50600054600160a01b900460ff1661026c565b3480156103c157600080fd5b5061037e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f557600080fd5b506102b860045481565b34801561040b57600080fd5b506102a1610dc3565b34801561042057600080fd5b506102a161042f366004612567565b610df7565b34801561044057600080fd5b506102a1610fd1565b34801561045557600080fd5b506000546001600160a01b031661037e565b34801561047357600080fd5b506102a1611003565b34801561048857600080fd5b506102b8600681565b34801561049d57600080fd5b506102a16104ac3660046126eb565b611098565b3480156104bd57600080fd5b506102b86104cc366004612377565b6110c7565b3480156104dd57600080fd5b506102a16104ec366004612377565b611102565b3480156104fd57600080fd5b506102e661050c3660046123b1565b63bc197c8160e01b95945050505050565b34801561052957600080fd5b506102a16105383660046125b0565b61118b565b34801561054957600080fd5b506102a1610558366004612625565b6112c1565b34801561056957600080fd5b506102b860105481565b34801561057f57600080fd5b50610588611523565b60405161027891906127c3565b3480156105a157600080fd5b5061037e6105b03660046126eb565b6006602052600090815260409020546001600160a01b031681565b3480156105d757600080fd5b506102b86105e6366004612377565b600f6020526000908152604090205481565b34801561060457600080fd5b5060015461037e906001600160a01b031681565b34801561062457600080fd5b50610588610633366004612377565b6115c5565b34801561064457600080fd5b506102a16106533660046126a1565b61167f565b34801561066457600080fd5b506102e66106733660046124fe565b63f23a6e6160e01b95945050505050565b34801561069057600080fd5b506102a161069f366004612377565b61185f565b3480156106b057600080fd5b506102b860025481565b3480156106c657600080fd5b506102b87f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216630271189760e51b148061071f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146107585760405162461bcd60e51b815260040161074f9061283a565b60405180910390fd5b600455565b600154604080516326ee884560e11b815290516000926001600160a01b031691634ddd108a916004808301926020929190829003018186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612394565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190612704565b905090565b60008054600160a01b900460ff16156108a65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161074f565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561095a576000848152600660205260409020546001600160a01b0316156108fc576108fc612a6a565b60045460055411156109505760405162461bcd60e51b815260206004820152601d60248201527f4865726f42616e6b3a20657863656564206d61784865726f436f756e74000000604482015260640161074f565b61095a84866118fa565b50630a85bd0160e11b95945050505050565b6003546001600160a01b031633146109bf5760405162461bcd60e51b81526020600482015260166024820152752432b937a130b7359d103737ba1037b832b930ba37b960511b604482015260640161074f565b600060085411610a115760405162461bcd60e51b815260206004820152601a60248201527f4865726f42616e6b3a206e6f20626f72726f776564206865726f000000000000604482015260640161074f565b60005b600854811015610b2d57600060098260068110610a3357610a33612ac2565b01546003546040516323b872dd60e01b81529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd92610a8c9216903090869060040161279f565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b5050506000828152600660209081526040808320546001600160a01b0316808452600f909252822080549193506001929091610af790849061299c565b92505081905550600160106000828254610b11919061299c565b9250508190555050508080610b2590612a4f565b915050610a14565b506000600855565b6000546001600160a01b03163314610b5f5760405162461bcd60e51b815260040161074f9061283a565b610b6761198b565b565b6000546001600160a01b03163314610b935760405162461bcd60e51b815260040161074f9061283a565b6040516331a9108f60e11b81526004810183905230906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b158015610bf557600080fd5b505afa158015610c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2d9190612394565b6001600160a01b031614610c795760405162461bcd60e51b815260206004820152601360248201527212195c9bd0985b9ace881b9bdd08199bdd5b99606a1b604482015260640161074f565b6000828152600660205260409020546001600160a01b031615610cde5760405162461bcd60e51b815260206004820152601760248201527f4865726f42616e6b3a20616c7265616479206f776e6564000000000000000000604482015260640161074f565b610ce882826118fa565b5050565b6000610cf7336110c7565b905060008111610d425760405162461bcd60e51b81526020600482015260166024820152754865726f42616e6b3a206e6f20636c61696d61626c6560501b604482015260640161074f565b336000908152600f602052604081208054908290556010805491928392610d6a9084906129f5565b90915550610d7b9050303384611a28565b60105460405133917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf791610db791858252602082015260400190565b60405180910390a25050565b6000546001600160a01b03163314610ded5760405162461bcd60e51b815260040161074f9061283a565b610b676000611b71565b6000546001600160a01b03163314610e215760405162461bcd60e51b815260040161074f9061283a565b6000826002811115610e3557610e35612a96565b1415610edc57600081610e49576000610e4d565b6000195b60015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810183905291925085169063095ea7b390604401602060405180830381600087803b158015610e9d57600080fd5b505af1158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed5919061265a565b5050505050565b6001826002811115610ef057610ef0612a96565b1415610f635760015460405163a22cb46560e01b81526001600160a01b03918216600482015282151560248201529084169063a22cb465906044015b600060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b50505050505050565b6002826002811115610f7757610f77612a96565b1415610fcc5760015460405163a22cb46560e01b81526001600160a01b03918216600482015282151560248201529084169063a22cb46590604401600060405180830381600087803b158015610f4657600080fd5b505050565b6000546001600160a01b03163314610ffb5760405162461bcd60e51b815260040161074f9061283a565b610b67611bc1565b6000546001600160a01b0316331461102d5760405162461bcd60e51b815260040161074f9061283a565b6008541561107d5760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a20756e72657475726e6564206865726f65730000000000604482015260640161074f565b610b676110926000546001600160a01b031690565b47611c49565b6000546001600160a01b031633146110c25760405162461bcd60e51b815260040161074f9061283a565b600255565b6010546001600160a01b0382166000908152600f60205260408120549091906110ee61075d565b6110f891906129d6565b61071f91906129b4565b6000546001600160a01b0316331461112c5760405162461bcd60e51b815260040161074f9061283a565b600380546001600160a01b038381166001600160a01b03198316811790935560408051938452911660208301819052917fd58299b712891143e76310d5e664c4203c940a67db37cf856bdaa3c5c76a802c910160405180910390a15050565b60005b81811015610fcc5760008383838181106111aa576111aa612ac2565b6020908102929092013560008181526006909352604090922054919250506001600160a01b03163381146112205760405162461bcd60e51b815260206004820152601860248201527f4865726f42616e6b3a206e6f74206865726f206f776e65720000000000000000604482015260640161074f565b604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342842e0e906112709030908590879060040161279f565b600060405180830381600087803b15801561128a57600080fd5b505af115801561129e573d6000803e3d6000fd5b505050506112ac8282611d62565b505080806112b990612a4f565b91505061118e565b6003546001600160a01b031633146113145760405162461bcd60e51b81526020600482015260166024820152752432b937a130b7359d103737ba1037b832b930ba37b960511b604482015260640161074f565b600854156113645760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a20756e72657475726e6564206865726f65730000000000604482015260640161074f565b6006815111156113b65760405162461bcd60e51b815260206004820152601d60248201527f4865726f42616e6b3a2065786365656420424f52524f575f4c494d4954000000604482015260640161074f565b7f00000000000000000000000000000000000000000000000000000000000000004710156114265760405162461bcd60e51b815260206004820152601b60248201527f4865726f42616e6b3a206e6f7420656e6f756768206d617267696e0000000000604482015260640161074f565b60005b815181101561151c5781818151811061144457611444612ac2565b60200260200101516009826006811061145f5761145f612ac2565b015560035482516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd92309291909116908690869081106114b1576114b1612ac2565b60200260200101516040518463ffffffff1660e01b81526004016114d79392919061279f565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b50505050808061151490612a4f565b915050611429565b5051600855565b6060600060085467ffffffffffffffff81111561154257611542612ad8565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b50905060005b6008548110156115bf576009816006811061158e5761158e612ac2565b01548282815181106115a2576115a2612ac2565b6020908102919091010152806115b781612a4f565b915050611571565b50919050565b6001600160a01b03811660009081526007602052604081206060916115e982611def565b905060008167ffffffffffffffff81111561160657611606612ad8565b60405190808252806020026020018201604052801561162f578160200160208202803683370190505b50905060005b82811015611676576116478482611df9565b82828151811061165957611659612ac2565b60209081029190910101528061166e81612a4f565b915050611635565b50949350505050565b61168a333083611a28565b60015460025460405163bc51fbd360e01b81526000926001600160a01b03169163bc51fbd3916116c191879187919060040161286f565b602060405180830381600087803b1580156116db57600080fd5b505af11580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190612704565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176357600080fd5b505afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190612394565b60015460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b1580156117e857600080fd5b505af11580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611820919061265a565b50600154604051630742f0a960e41b815260048101839052602481018490523360448201526001600160a01b039091169063742f0a9090606401610f2c565b6000546001600160a01b031633146118895760405162461bcd60e51b815260040161074f9061283a565b6001600160a01b0381166118ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161074f565b6118f781611b71565b50565b600082815260066020908152604080832080546001600160a01b0319166001600160a01b03861690811790915583526007909152902061193a9083611e0c565b506005805490600061194b83612a4f565b9190505550806001600160a01b03167ff4dc75d25e9acb36512fa1f87cb7119b935da57bedfa0b72d2ed267cb71a136b83604051610db791815260200190565b600054600160a01b900460ff166119db5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161074f565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316301415611ad457610fcc8282600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8c57600080fd5b505afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190612394565b6001600160a01b03169190611e18565b610fcc838383600160009054906101000a90046001600160a01b03166001600160a01b0316634ddd108a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612394565b6001600160a01b0316929190611e7b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615611c0e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161074f565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a0b3390565b80471015611c995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161074f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ce6576040519150601f19603f3d011682016040523d82523d6000602084013e611ceb565b606091505b5050905080610fcc5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161074f565b600082815260066020908152604080832080546001600160a01b03191690556001600160a01b038416835260079091529020611d9e9083611ea2565b5060058054906000611daf83612a38565b9190505550806001600160a01b03167f4bf5d1b07686e0a2b1d9d1cc5d4a7db29045845488485a527798e52d1f993e3083604051610db791815260200190565b600061071f825490565b6000611e058383611eae565b9392505050565b6000611e058383611ed8565b6040516001600160a01b038316602482015260448101829052610fcc90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611f27565b611e9c846323b872dd60e01b858585604051602401611e449392919061279f565b50505050565b6000611e058383611ff9565b6000826000018281548110611ec557611ec5612ac2565b9060005260206000200154905092915050565b6000818152600183016020526040812054611f1f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561071f565b50600061071f565b6000611f7c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120ec9092919063ffffffff16565b805190915015610fcc5780806020019051810190611f9a919061265a565b610fcc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161074f565b600081815260018301602052604081205480156120e257600061201d6001836129f5565b8554909150600090612031906001906129f5565b905081811461209657600086600001828154811061205157612051612ac2565b906000526020600020015490508087600001848154811061207457612074612ac2565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120a7576120a7612aac565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061071f565b600091505061071f565b60606120fb8484600085612103565b949350505050565b6060824710156121645760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161074f565b6001600160a01b0385163b6121bb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161074f565b600080866001600160a01b031685876040516121d79190612783565b60006040518083038185875af1925050503d8060008114612214576040519150601f19603f3d011682016040523d82523d6000602084013e612219565b606091505b5091509150612229828286612234565b979650505050505050565b60608315612243575081611e05565b8251156122535782518084602001fd5b8160405162461bcd60e51b815260040161074f9190612807565b600082601f83011261227e57600080fd5b8135602067ffffffffffffffff82111561229a5761229a612ad8565b8160051b6122a982820161291b565b8381528281019086840183880185018910156122c457600080fd5b600093505b858410156122e75780358352600193909301929184019184016122c9565b50979650505050505050565b600082601f83011261230457600080fd5b813567ffffffffffffffff81111561231e5761231e612ad8565b612331601f8201601f191660200161291b565b81815284602083860101111561234657600080fd5b816020850160208301376000918101602001919091529392505050565b80356003811061237257600080fd5b919050565b60006020828403121561238957600080fd5b8135611e0581612aee565b6000602082840312156123a657600080fd5b8151611e0581612aee565b600080600080600060a086880312156123c957600080fd5b85356123d481612aee565b945060208601356123e481612aee565b9350604086013567ffffffffffffffff8082111561240157600080fd5b61240d89838a0161226d565b9450606088013591508082111561242357600080fd5b61242f89838a0161226d565b9350608088013591508082111561244557600080fd5b50612452888289016122f3565b9150509295509295909350565b60008060008060006080868803121561247757600080fd5b853561248281612aee565b9450602086013561249281612aee565b935060408601359250606086013567ffffffffffffffff808211156124b657600080fd5b818801915088601f8301126124ca57600080fd5b8135818111156124d957600080fd5b8960208285010111156124eb57600080fd5b9699959850939650602001949392505050565b600080600080600060a0868803121561251657600080fd5b853561252181612aee565b9450602086013561253181612aee565b93506040860135925060608601359150608086013567ffffffffffffffff81111561255b57600080fd5b612452888289016122f3565b60008060006060848603121561257c57600080fd5b833561258781612aee565b925061259560208501612363565b915060408401356125a581612b03565b809150509250925092565b600080602083850312156125c357600080fd5b823567ffffffffffffffff808211156125db57600080fd5b818501915085601f8301126125ef57600080fd5b8135818111156125fe57600080fd5b8660208260051b850101111561261357600080fd5b60209290920196919550909350505050565b60006020828403121561263757600080fd5b813567ffffffffffffffff81111561264e57600080fd5b6120fb8482850161226d565b60006020828403121561266c57600080fd5b8151611e0581612b03565b60006020828403121561268957600080fd5b81356001600160e01b031981168114611e0557600080fd5b600080604083850312156126b457600080fd5b823567ffffffffffffffff8111156126cb57600080fd5b8301608081860312156126dd57600080fd5b946020939093013593505050565b6000602082840312156126fd57600080fd5b5035919050565b60006020828403121561271657600080fd5b5051919050565b6000806040838503121561273057600080fd5b82359150602083013561274281612aee565b809150509250929050565b81835260006001600160fb1b0383111561276657600080fd5b8260051b8083602087013760009401602001938452509192915050565b60008251612795818460208701612a0c565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b818110156127fb578351835292840192918401916001016127df565b50909695505050505050565b6020815260008251806020840152612826816040850160208701612a0c565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60608152600061287e85612363565b6003811061289c57634e487b7160e01b600052602160045260246000fd5b606083015260208501356128af81612aee565b6001600160a01b031660808301526128ca604086018661294c565b608060a08501526128df60e08501828461274d565b9150506128ef606087018761294c565b848303605f190160c086015261290683828461274d565b60208601979097525050505060400152919050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561294457612944612ad8565b604052919050565b6000808335601e1984360301811261296357600080fd5b830160208101925035905067ffffffffffffffff81111561298357600080fd5b8060051b360383131561299557600080fd5b9250929050565b600082198211156129af576129af612a80565b500190565b6000826129d157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156129f0576129f0612a80565b500290565b600082821015612a0757612a07612a80565b500390565b60005b83811015612a27578181015183820152602001612a0f565b83811115611e9c5750506000910152565b600081612a4757612a47612a80565b506000190190565b6000600019821415612a6357612a63612a80565b5060010190565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146118f757600080fd5b80151581146118f757600080fdfea2646970667358221220ece95d7b47f4f387c58bede76798f9ebde3a8aaa126f0a41536aa6021079e7cd64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1568,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2905,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10331,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "auctionHouse",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AuctionHouse)9101"
      },
      {
        "astId": 10333,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "auctionExpiration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10335,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "operator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10337,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "maxHeroCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10339,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "numHeroes",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10343,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "heroOwners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10348,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "ownedHeroes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UintSet)7835_storage)"
      },
      {
        "astId": 10350,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "numBorrows",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10354,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "borrowedHeroes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)6_storage"
      },
      {
        "astId": 10358,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "userLoans",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10360,
        "contract": "contracts/HeroBank.sol:HeroBank",
        "label": "totalLoans",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)6_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[6]",
        "numberOfBytes": "192"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AuctionHouse)9101": {
        "encoding": "inplace",
        "label": "contract AuctionHouse",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)7835_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7835_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Set)7377_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7372,
            "contract": "contracts/HeroBank.sol:HeroBank",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7376,
            "contract": "contracts/HeroBank.sol:HeroBank",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7835_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 7834,
            "contract": "contracts/HeroBank.sol:HeroBank",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7377_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}