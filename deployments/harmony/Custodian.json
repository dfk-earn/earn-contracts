{
  "address": "0x9fBF69c7ef0d5d954989A63c3c2249dfEE6c97bc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_DFKQuest",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DFKVender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DFKGold",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerIndex",
          "type": "uint256"
        }
      ],
      "name": "AccountCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DFKGold",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DFKVender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_questType",
          "type": "address"
        }
      ],
      "name": "addQuestType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "hasAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "questTypes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "setPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3aca986ced68e2029e31e0e2a1a8aef6f03846e7e642f6a01039b28fa9e4a7ac",
  "receipt": {
    "to": null,
    "from": "0x0B1f506d4A9C0b1091bCAd24567C08fdCcaD2B64",
    "contractAddress": "0x9fBF69c7ef0d5d954989A63c3c2249dfEE6c97bc",
    "transactionIndex": 16,
    "gasUsed": "3143669",
    "logsBloom": "0x
    "blockHash": "0xcde2c83e079857e84cedd74e131c1b17b372ab62f9c99f4747bb2fc79f02380b",
    "transactionHash": "0x3aca986ced68e2029e31e0e2a1a8aef6f03846e7e642f6a01039b28fa9e4a7ac",
    "logs": [],
    "blockNumber": 21119749,
    "cumulativeGasUsed": "9787753",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5100bd31b822371108a0f63dcfb6594b9919eaf4",
    "0xe53BF78F8b99B6d356F93F41aFB9951168cca2c6",
    "0x3a4EDcf3312f44EF027acfd8c21382a5259936e7"
  ],
  "numDeployments": 1,
  "solcInputHash": "15aede8f24d499e547ada261efbea2ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DFKQuest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DFKVender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DFKGold\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerIndex\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DFKGold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DFKVender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_questType\",\"type\":\"address\"}],\"name\":\"addQuestType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"questTypes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Custodian.sol\":\"Custodian\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xe61a285c5255957ac2b03b633f13ae245bd546d5bf2fe2650508983fda1498b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./Custodian.sol\\\";\\nimport \\\"./interfaces/IDFKQuest.sol\\\";\\n\\ncontract Account is ERC721Holder {\\n    Custodian public custodian;\\n    address public player;\\n\\n    constructor() {\\n        custodian = Custodian(msg.sender);\\n    }\\n\\n    function initialize(address _player) external {\\n        require(msg.sender == address(custodian), \\\"Account: no permission\\\");\\n        player = _player;\\n    }\\n\\n    receive() external payable {}\\n\\n    modifier onlyPlayer() {\\n        require(msg.sender == player, \\\"Account: caller must be player\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == custodian.operator(), \\\"Account: caller must be operator\\\");\\n        _;\\n    }\\n\\n    function withdrawETH(uint256 amount) external onlyPlayer {\\n        uint256 balance = address(this).balance;\\n        require(amount <= balance, \\\"Account: insufficient balance\\\");\\n        payable(player).transfer(amount);\\n    }\\n\\n    function withdrawTokens(address[] calldata _tokens) external onlyPlayer {\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = IERC20(_tokens[i]);\\n            uint256 balance = token.balanceOf(address(this));\\n            token.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    function withdrawNFTs(address _nft, uint256[] calldata _tokenIds) external onlyPlayer {\\n        IERC721 nft = IERC721(_nft);\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            nft.safeTransferFrom(address(this), msg.sender, _tokenIds[i]);\\n        }\\n    }\\n\\n    function swapForGold(address[] calldata _tokens, uint[] calldata _amounts) external onlyPlayer {\\n        address vender = custodian.DFKVender();\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            IERC20 token = IERC20(_tokens[i]);\\n            uint amount = _amounts[i];\\n            uint balance = token.balanceOf(address(this));\\n            require(amount <= balance, \\\"Account: insufficient balance\\\");\\n            token.approve(vender, amount);\\n            bytes memory payload = abi.encodeWithSelector(bytes4(0x096c5e1a), _tokens[i], _amounts[i]);\\n            (bool success,) = vender.call(payload);\\n            require(success, \\\"Account: sell items failed\\\");\\n        }\\n        IERC20 DFKGold = IERC20(custodian.DFKGold());\\n        uint goldBalance = DFKGold.balanceOf(address(this));\\n        DFKGold.transfer(player, goldBalance);\\n    }\\n\\n    function startQuest(\\n        uint256[] calldata _heroIds,\\n        address _questType,\\n        uint8 _attempts\\n    ) \\n        external\\n        onlyOperator\\n    {\\n        uint256 fee = _heroIds.length * custodian.fee();\\n        require(address(this).balance >= fee, \\\"Account: insufficent balance\\\");\\n        require(custodian.questTypes(_questType), \\\"Account: unsupported questType\\\");\\n        IDFKQuest DFKQuest = IDFKQuest(custodian.DFKQuest());\\n        DFKQuest.startQuest(_heroIds, _questType, _attempts);\\n        payable(custodian.admin()).transfer(fee);\\n    }\\n\\n    function cancelQuest(uint256 _heroId) external onlyOperator {\\n        IDFKQuest DFKQuest = IDFKQuest(custodian.DFKQuest());\\n        DFKQuest.cancelQuest(_heroId);\\n    }\\n\\n    function completeQuest(uint256 _heroId) external onlyOperator {\\n        IDFKQuest DFKQuest = IDFKQuest(custodian.DFKQuest());\\n        DFKQuest.completeQuest(_heroId);\\n    }\\n}\\n\",\"keccak256\":\"0x0ca950d487234da71024ddd1bd87eedc59ac36df9652026a2fd46001fad8700d\",\"license\":\"MIT\"},\"contracts/Custodian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"./Account.sol\\\";\\n\\ncontract Custodian {\\n    address public immutable DFKQuest;\\n    address public immutable DFKVender;\\n    address public immutable DFKGold;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    address public operator;\\n\\n    uint256 public fee = 0.1 ether;\\n    \\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    EnumerableMap.UintToAddressMap private playerToAccount;\\n\\n    mapping(address => bool) public questTypes;\\n\\n    event AccountCreated(address indexed player, address indexed account, uint playerIndex);\\n\\n    constructor(address _DFKQuest, address _DFKVender, address _DFKGold) {\\n        admin = msg.sender;\\n        operator = msg.sender;\\n        DFKQuest = _DFKQuest;\\n        DFKVender = _DFKVender;\\n        DFKGold = _DFKGold;\\n    }\\n\\n    function createAccount() external returns (address account) {\\n        address player = msg.sender;\\n        require(!hasAccount(player), 'Custodian: account exists');\\n        bytes memory bytecode = type(Account).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(address(this), player));\\n        assembly {\\n            account := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        Account(payable(account)).initialize(player);\\n        playerToAccount.set(uint(uint160(player)), account);\\n        emit AccountCreated(player, account, playerToAccount.length());\\n    }\\n\\n    function playersCount() public view returns (uint256) {\\n        return playerToAccount.length();\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        (uint player, ) = playerToAccount.at(index);\\n        return address(uint160(player));\\n    }\\n\\n    function hasAccount(address player) public view returns (bool) {\\n        return playerToAccount.contains(uint(uint160(player)));\\n    }\\n\\n    function getAccount(address player) public view returns (address) {\\n        return playerToAccount.get(uint(uint160(player)));\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Custodian: admin required\\\");\\n        _;\\n    }\\n\\n    function addQuestType(address _questType) public onlyAdmin {\\n        questTypes[_questType] = true;\\n    }\\n\\n    function setOperator(address _operator) external onlyAdmin {\\n        operator = _operator;\\n    }\\n\\n    function setPendingAdmin(address newPendingAdmin) external onlyAdmin {\\n        pendingAdmin = newPendingAdmin;\\n    }\\n\\n    function acceptAdmin() external {\\n        require(msg.sender == pendingAdmin, \\\"Custodian: no permission\\\");\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x376e7b074e01f47e84f1b5221461f28ae9de7f9fe3a5436f1e37e3f20b67afdc\",\"license\":\"MIT\"},\"contracts/interfaces/IDFKQuest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDFKQuest {\\n    function startQuest(uint256[] calldata _heroIds, address _questType, uint8 _attempts) external;\\n    function cancelQuest(uint256 _heroId) external;\\n    function completeQuest(uint256 _heroId) external;\\n}\",\"keccak256\":\"0x3c9b1f1d36eadd2aea1e4f5aaf6178723c2c526a3a9649b245ff4f25e263665d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405267016345785d8a00006003553480156200001d57600080fd5b506040516200393b3803806200393b833981810160405281019062000043919062000189565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050506200022d565b600081519050620001838162000213565b92915050565b6000806000606084860312156200019f57600080fd5b6000620001af8682870162000172565b9350506020620001c28682870162000172565b9250506040620001d58682870162000172565b9150509250925092565b6000620001ec82620001f3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021e81620001df565b81146200022a57600080fd5b50565b60805160601c60a05160601c60c05160601c6136d56200026660003960006109ba015260006109de0152600061085101526136d56000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063b8de0547116100a2578063e55ae4e811610071578063e55ae4e814610282578063e7b68734146102b2578063f476f586146102d0578063f851a440146102ee578063fbcbc0f11461030c5761010b565b8063b8de0547146101fa578063b90adda214610218578063c8e40fbf14610234578063ddca3f43146102645761010b565b8063570ca735116100de578063570ca735146101845780639dca362f146101a2578063a3f67d6d146101c0578063b3ab15fb146101de5761010b565b80630e18b681146101105780630ea8dcce1461011a578063267822471461014a5780634dd18bf514610168575b600080fd5b61011861033c565b005b610134600480360381019061012f9190610db6565b610472565b6040516101419190610f1f565b60405180910390f35b610152610492565b60405161015f9190610f04565b60405180910390f35b610182600480360381019061017d9190610db6565b6104b8565b005b61018c61058a565b6040516101999190610f04565b60405180910390f35b6101aa6105b0565b6040516101b79190610f04565b60405180910390f35b6101c861076c565b6040516101d59190610fba565b60405180910390f35b6101f860048036038101906101f39190610db6565b61077d565b005b61020261084f565b60405161020f9190610f04565b60405180910390f35b610232600480360381019061022d9190610db6565b610873565b005b61024e60048036038101906102499190610db6565b61095c565b60405161025b9190610f1f565b60405180910390f35b61026c61098f565b6040516102799190610fba565b60405180910390f35b61029c60048036038101906102979190610ddf565b610995565b6040516102a99190610f04565b60405180910390f35b6102ba6109b8565b6040516102c79190610f04565b60405180910390f35b6102d86109dc565b6040516102e59190610f04565b60405180910390f35b6102f6610a00565b6040516103039190610f04565b60405180910390f35b61032660048036038101906103219190610db6565b610a24565b6040516103339190610f04565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390610f5a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60076020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610f9a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803390506105bf8161095c565b156105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690610f3a565b60405180910390fd5b60006040518060200161061190610d7f565b6020820181038252601f19601f8201166040525090506000308360405160200161063c929190610ed8565b604051602081830303815290604052805190602001209050808251602084016000f593508373ffffffffffffffffffffffffffffffffffffffff1663c4d66de8846040518263ffffffff1660e01b81526004016106999190610f04565b600060405180830381600087803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b505050506106f78373ffffffffffffffffffffffffffffffffffffffff16856004610a579092919063ffffffff16565b508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f33310a89c32d8cc00057ad6ef6274d2f8fe22389a992cf89983e09fc84f6cfff6107516004610a8c565b60405161075e9190610fba565b60405180910390a350505090565b60006107786004610a8c565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290610f9a565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890610f9a565b60405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006109888273ffffffffffffffffffffffffffffffffffffffff166004610aa190919063ffffffff16565b9050919050565b60035481565b6000806109ac836004610abb90919063ffffffff16565b50905080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610a508273ffffffffffffffffffffffffffffffffffffffff166004610ae790919063ffffffff16565b9050919050565b6000610a83846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610b04565b90509392505050565b6000610a9a82600001610b3f565b9050919050565b6000610ab3836000018360001b610b54565b905092915050565b600080600080610ace8660000186610b74565b915091508160001c8160001c9350935050509250929050565b6000610af9836000018360001b610bb4565b60001c905092915050565b60008184600201600085815260200190815260200160002081905550610b368385600001610c3090919063ffffffff16565b90509392505050565b6000610b4d82600001610c47565b9050919050565b6000610b6c8284600001610c5c90919063ffffffff16565b905092915050565b6000806000610b8f8486600001610c7390919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b6000808360020160008481526020019081526020016000205490506000801b81141580610be75750610be68484610b54565b5b610c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1d90610f7a565b60405180910390fd5b8091505092915050565b6000610c3f8360000183610c8a565b905092915050565b6000610c5582600001610cfa565b9050919050565b6000610c6b8360000183610d0b565b905092915050565b6000610c828360000183610d2e565b905092915050565b6000610c968383610d0b565b610cef578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610cf4565b600090505b92915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000826000018281548110610d6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b61256e8061113283390190565b600081359050610d9b81611103565b92915050565b600081359050610db08161111a565b92915050565b600060208284031215610dc857600080fd5b6000610dd684828501610d8c565b91505092915050565b600060208284031215610df157600080fd5b6000610dff84828501610da1565b91505092915050565b610e1181610fe6565b82525050565b610e28610e2382610fe6565b61102e565b82525050565b610e3781610ff8565b82525050565b6000610e4a601983610fd5565b9150610e558261105f565b602082019050919050565b6000610e6d601883610fd5565b9150610e7882611088565b602082019050919050565b6000610e90601e83610fd5565b9150610e9b826110b1565b602082019050919050565b6000610eb3601983610fd5565b9150610ebe826110da565b602082019050919050565b610ed281611024565b82525050565b6000610ee48285610e17565b601482019150610ef48284610e17565b6014820191508190509392505050565b6000602082019050610f196000830184610e08565b92915050565b6000602082019050610f346000830184610e2e565b92915050565b60006020820190508181036000830152610f5381610e3d565b9050919050565b60006020820190508181036000830152610f7381610e60565b9050919050565b60006020820190508181036000830152610f9381610e83565b9050919050565b60006020820190508181036000830152610fb381610ea6565b9050919050565b6000602082019050610fcf6000830184610ec9565b92915050565b600082825260208201905092915050565b6000610ff182611004565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061103982611040565b9050919050565b600061104b82611052565b9050919050565b60008160601b9050919050565b7f437573746f6469616e3a206163636f756e742065786973747300000000000000600082015250565b7f437573746f6469616e3a206e6f207065726d697373696f6e0000000000000000600082015250565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b7f437573746f6469616e3a2061646d696e20726571756972656400000000000000600082015250565b61110c81610fe6565b811461111757600080fd5b50565b61112381611024565b811461112e57600080fd5b5056fe608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061250e806100606000396000f3fe6080604052600436106100a05760003560e01c8063848debfb11610064578063848debfb14610191578063c1eaaf55146101ba578063c4d66de8146101e3578063c855dea31461020c578063f14210a614610235578063fe90ff7d1461025e576100a7565b8063150b7a02146100ac578063375b74c3146100e957806348db5f8914610114578063528be0a91461013f5780635ecb16cd14610168576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190611a65565b610287565b6040516100e09190611f74565b60405180910390f35b3480156100f557600080fd5b506100fe61029b565b60405161010b9190611f8f565b60405180910390f35b34801561012057600080fd5b506101296102bf565b6040516101369190611eb9565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190611c87565b6102e5565b005b34801561017457600080fd5b5061018f600480360381019061018a9190611b38565b610502565b005b34801561019d57600080fd5b506101b860048036038101906101b39190611b7d565b610727565b005b3480156101c657600080fd5b506101e160048036038101906101dc9190611ae0565b610e13565b005b3480156101ef57600080fd5b5061020a60048036038101906102059190611a13565b610f7e565b005b34801561021857600080fd5b50610233600480360381019061022e9190611bf2565b611050565b005b34801561024157600080fd5b5061025c60048036038101906102579190611c87565b611537565b005b34801561026a57600080fd5b5061028560048036038101906102809190611c87565b61167c565b005b600063150b7a0260e01b9050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e790611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b15801561045957600080fd5b505afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663528be0a9836040518263ffffffff1660e01b81526004016104cc919061208a565b600060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105899061204a565b60405180910390fd5b60005b828290508110156107225760008383838181106105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906105f09190611a13565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161062d9190611eb9565b60206040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190611cb0565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106ba929190611f0b565b602060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611c5e565b505050808061071a906122a5565b915050610595565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae9061204a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f476f5866040518163ffffffff1660e01b815260040160206040518083038186803b15801561082057600080fd5b505afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611a3c565b905060005b85859050811015610c295760008686838181106108a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108b89190611a13565b905060008585848181106108f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109399190611eb9565b60206040518083038186803b15801561095157600080fd5b505afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611cb0565b9050808211156109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590611fca565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b8152600401610a09929190611f0b565b602060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611c5e565b50600063096c5e1a60e01b8a8a87818110610a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ab49190611a13565b898988818110610aed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401610b05929190611f0b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008673ffffffffffffffffffffffffffffffffffffffff1682604051610b8b9190611ea2565b6000604051808303816000865af19150503d8060008114610bc8576040519150601f19603f3d011682016040523d82523d6000602084013e610bcd565b606091505b5050905080610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c089061202a565b60405180910390fd5b50505050508080610c21906122a5565b91505061085d565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7b687346040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611a3c565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d089190611eb9565b60206040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611cb0565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610db7929190611f0b565b602060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190611c5e565b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a9061204a565b60405180910390fd5b600083905060005b83839050811015610f77578173ffffffffffffffffffffffffffffffffffffffff166342842e0e3033878786818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b8152600401610f3293929190611ed4565b600060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050508080610f6f906122a5565b915050610eab565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390611faa565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b657600080fd5b505afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115290611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c457600080fd5b505afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190611cb0565b8585905061120a9190612133565b90508047101561124f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112469061200a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ea8dcce846040518263ffffffff1660e01b81526004016112a89190611eb9565b60206040518083038186803b1580156112c057600080fd5b505afa1580156112d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f89190611c5e565b611337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132e9061206a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663c855dea3878787876040518563ffffffff1660e01b81526004016114199493929190611f34565b600060405180830381600087803b15801561143357600080fd5b505af1158015611447573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190611a3c565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561152e573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be9061204a565b60405180910390fd5b60004790508082111561160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690611fca565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611677573d6000803e3d6000fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e257600080fd5b505afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663fe90ff7d836040518263ffffffff1660e01b8152600401611863919061208a565b600060405180830381600087803b15801561187d57600080fd5b505af1158015611891573d6000803e3d6000fd5b505050505050565b60006118ac6118a7846120ca565b6120a5565b9050828152602081018484840111156118c457600080fd5b6118cf848285612232565b509392505050565b6000813590506118e68161247c565b92915050565b6000815190506118fb8161247c565b92915050565b60008083601f84011261191357600080fd5b8235905067ffffffffffffffff81111561192c57600080fd5b60208301915083602082028301111561194457600080fd5b9250929050565b60008083601f84011261195d57600080fd5b8235905067ffffffffffffffff81111561197657600080fd5b60208301915083602082028301111561198e57600080fd5b9250929050565b6000815190506119a481612493565b92915050565b600082601f8301126119bb57600080fd5b81356119cb848260208601611899565b91505092915050565b6000813590506119e3816124aa565b92915050565b6000815190506119f8816124aa565b92915050565b600081359050611a0d816124c1565b92915050565b600060208284031215611a2557600080fd5b6000611a33848285016118d7565b91505092915050565b600060208284031215611a4e57600080fd5b6000611a5c848285016118ec565b91505092915050565b60008060008060808587031215611a7b57600080fd5b6000611a89878288016118d7565b9450506020611a9a878288016118d7565b9350506040611aab878288016119d4565b925050606085013567ffffffffffffffff811115611ac857600080fd5b611ad4878288016119aa565b91505092959194509250565b600080600060408486031215611af557600080fd5b6000611b03868287016118d7565b935050602084013567ffffffffffffffff811115611b2057600080fd5b611b2c8682870161194b565b92509250509250925092565b60008060208385031215611b4b57600080fd5b600083013567ffffffffffffffff811115611b6557600080fd5b611b7185828601611901565b92509250509250929050565b60008060008060408587031215611b9357600080fd5b600085013567ffffffffffffffff811115611bad57600080fd5b611bb987828801611901565b9450945050602085013567ffffffffffffffff811115611bd857600080fd5b611be48782880161194b565b925092505092959194509250565b60008060008060608587031215611c0857600080fd5b600085013567ffffffffffffffff811115611c2257600080fd5b611c2e8782880161194b565b94509450506020611c41878288016118d7565b9250506040611c52878288016119fe565b91505092959194509250565b600060208284031215611c7057600080fd5b6000611c7e84828501611995565b91505092915050565b600060208284031215611c9957600080fd5b6000611ca7848285016119d4565b91505092915050565b600060208284031215611cc257600080fd5b6000611cd0848285016119e9565b91505092915050565b611ce28161218d565b82525050565b6000611cf48385612106565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611d2357600080fd5b602083029250611d34838584612232565b82840190509392505050565b611d49816121ab565b82525050565b6000611d5a826120fb565b611d648185612117565b9350611d74818560208601612241565b80840191505092915050565b611d898161220e565b82525050565b6000611d9c601683612122565b9150611da78261235d565b602082019050919050565b6000611dbf601d83612122565b9150611dca82612386565b602082019050919050565b6000611de2602083612122565b9150611ded826123af565b602082019050919050565b6000611e05601c83612122565b9150611e10826123d8565b602082019050919050565b6000611e28601a83612122565b9150611e3382612401565b602082019050919050565b6000611e4b601e83612122565b9150611e568261242a565b602082019050919050565b6000611e6e601e83612122565b9150611e7982612453565b602082019050919050565b611e8d816121f7565b82525050565b611e9c81612201565b82525050565b6000611eae8284611d4f565b915081905092915050565b6000602082019050611ece6000830184611cd9565b92915050565b6000606082019050611ee96000830186611cd9565b611ef66020830185611cd9565b611f036040830184611e84565b949350505050565b6000604082019050611f206000830185611cd9565b611f2d6020830184611e84565b9392505050565b60006060820190508181036000830152611f4f818688611ce8565b9050611f5e6020830185611cd9565b611f6b6040830184611e93565b95945050505050565b6000602082019050611f896000830184611d40565b92915050565b6000602082019050611fa46000830184611d80565b92915050565b60006020820190508181036000830152611fc381611d8f565b9050919050565b60006020820190508181036000830152611fe381611db2565b9050919050565b6000602082019050818103600083015261200381611dd5565b9050919050565b6000602082019050818103600083015261202381611df8565b9050919050565b6000602082019050818103600083015261204381611e1b565b9050919050565b6000602082019050818103600083015261206381611e3e565b9050919050565b6000602082019050818103600083015261208381611e61565b9050919050565b600060208201905061209f6000830184611e84565b92915050565b60006120af6120c0565b90506120bb8282612274565b919050565b6000604051905090565b600067ffffffffffffffff8211156120e5576120e461231d565b5b6120ee8261234c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061213e826121f7565b9150612149836121f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612182576121816122ee565b5b828202905092915050565b6000612198826121d7565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061221982612220565b9050919050565b600061222b826121d7565b9050919050565b82818337600083830152505050565b60005b8381101561225f578082015181840152602081019050612244565b8381111561226e576000848401525b50505050565b61227d8261234c565b810181811067ffffffffffffffff8211171561229c5761229b61231d565b5b80604052505050565b60006122b0826121f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156122e3576122e26122ee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4163636f756e743a206e6f207065726d697373696f6e00000000000000000000600082015250565b7f4163636f756e743a20696e73756666696369656e742062616c616e6365000000600082015250565b7f4163636f756e743a2063616c6c6572206d757374206265206f70657261746f72600082015250565b7f4163636f756e743a20696e737566666963656e742062616c616e636500000000600082015250565b7f4163636f756e743a2073656c6c206974656d73206661696c6564000000000000600082015250565b7f4163636f756e743a2063616c6c6572206d75737420626520706c617965720000600082015250565b7f4163636f756e743a20756e737570706f72746564207175657374547970650000600082015250565b6124858161218d565b811461249057600080fd5b50565b61249c8161219f565b81146124a757600080fd5b50565b6124b3816121f7565b81146124be57600080fd5b50565b6124ca81612201565b81146124d557600080fd5b5056fea26469706673582212208476ed0d8d146a222f5474a014f71e23cbf0c4e4727d85d0e3c525504f81066764736f6c63430008040033a2646970667358221220c4db0e412b01659feb69d5e4d1ae6102c0cbd5a9f8e1f16bb895ffe6f168321564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063b8de0547116100a2578063e55ae4e811610071578063e55ae4e814610282578063e7b68734146102b2578063f476f586146102d0578063f851a440146102ee578063fbcbc0f11461030c5761010b565b8063b8de0547146101fa578063b90adda214610218578063c8e40fbf14610234578063ddca3f43146102645761010b565b8063570ca735116100de578063570ca735146101845780639dca362f146101a2578063a3f67d6d146101c0578063b3ab15fb146101de5761010b565b80630e18b681146101105780630ea8dcce1461011a578063267822471461014a5780634dd18bf514610168575b600080fd5b61011861033c565b005b610134600480360381019061012f9190610db6565b610472565b6040516101419190610f1f565b60405180910390f35b610152610492565b60405161015f9190610f04565b60405180910390f35b610182600480360381019061017d9190610db6565b6104b8565b005b61018c61058a565b6040516101999190610f04565b60405180910390f35b6101aa6105b0565b6040516101b79190610f04565b60405180910390f35b6101c861076c565b6040516101d59190610fba565b60405180910390f35b6101f860048036038101906101f39190610db6565b61077d565b005b61020261084f565b60405161020f9190610f04565b60405180910390f35b610232600480360381019061022d9190610db6565b610873565b005b61024e60048036038101906102499190610db6565b61095c565b60405161025b9190610f1f565b60405180910390f35b61026c61098f565b6040516102799190610fba565b60405180910390f35b61029c60048036038101906102979190610ddf565b610995565b6040516102a99190610f04565b60405180910390f35b6102ba6109b8565b6040516102c79190610f04565b60405180910390f35b6102d86109dc565b6040516102e59190610f04565b60405180910390f35b6102f6610a00565b6040516103039190610f04565b60405180910390f35b61032660048036038101906103219190610db6565b610a24565b6040516103339190610f04565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c390610f5a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60076020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90610f9a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000803390506105bf8161095c565b156105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690610f3a565b60405180910390fd5b60006040518060200161061190610d7f565b6020820181038252601f19601f8201166040525090506000308360405160200161063c929190610ed8565b604051602081830303815290604052805190602001209050808251602084016000f593508373ffffffffffffffffffffffffffffffffffffffff1663c4d66de8846040518263ffffffff1660e01b81526004016106999190610f04565b600060405180830381600087803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b505050506106f78373ffffffffffffffffffffffffffffffffffffffff16856004610a579092919063ffffffff16565b508373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f33310a89c32d8cc00057ad6ef6274d2f8fe22389a992cf89983e09fc84f6cfff6107516004610a8c565b60405161075e9190610fba565b60405180910390a350505090565b60006107786004610a8c565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290610f9a565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f890610f9a565b60405180910390fd5b6001600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006109888273ffffffffffffffffffffffffffffffffffffffff166004610aa190919063ffffffff16565b9050919050565b60035481565b6000806109ac836004610abb90919063ffffffff16565b50905080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610a508273ffffffffffffffffffffffffffffffffffffffff166004610ae790919063ffffffff16565b9050919050565b6000610a83846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b610b04565b90509392505050565b6000610a9a82600001610b3f565b9050919050565b6000610ab3836000018360001b610b54565b905092915050565b600080600080610ace8660000186610b74565b915091508160001c8160001c9350935050509250929050565b6000610af9836000018360001b610bb4565b60001c905092915050565b60008184600201600085815260200190815260200160002081905550610b368385600001610c3090919063ffffffff16565b90509392505050565b6000610b4d82600001610c47565b9050919050565b6000610b6c8284600001610c5c90919063ffffffff16565b905092915050565b6000806000610b8f8486600001610c7390919063ffffffff16565b9050808560020160008381526020019081526020016000205492509250509250929050565b6000808360020160008481526020019081526020016000205490506000801b81141580610be75750610be68484610b54565b5b610c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1d90610f7a565b60405180910390fd5b8091505092915050565b6000610c3f8360000183610c8a565b905092915050565b6000610c5582600001610cfa565b9050919050565b6000610c6b8360000183610d0b565b905092915050565b6000610c828360000183610d2e565b905092915050565b6000610c968383610d0b565b610cef578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610cf4565b600090505b92915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6000826000018281548110610d6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b61256e8061113283390190565b600081359050610d9b81611103565b92915050565b600081359050610db08161111a565b92915050565b600060208284031215610dc857600080fd5b6000610dd684828501610d8c565b91505092915050565b600060208284031215610df157600080fd5b6000610dff84828501610da1565b91505092915050565b610e1181610fe6565b82525050565b610e28610e2382610fe6565b61102e565b82525050565b610e3781610ff8565b82525050565b6000610e4a601983610fd5565b9150610e558261105f565b602082019050919050565b6000610e6d601883610fd5565b9150610e7882611088565b602082019050919050565b6000610e90601e83610fd5565b9150610e9b826110b1565b602082019050919050565b6000610eb3601983610fd5565b9150610ebe826110da565b602082019050919050565b610ed281611024565b82525050565b6000610ee48285610e17565b601482019150610ef48284610e17565b6014820191508190509392505050565b6000602082019050610f196000830184610e08565b92915050565b6000602082019050610f346000830184610e2e565b92915050565b60006020820190508181036000830152610f5381610e3d565b9050919050565b60006020820190508181036000830152610f7381610e60565b9050919050565b60006020820190508181036000830152610f9381610e83565b9050919050565b60006020820190508181036000830152610fb381610ea6565b9050919050565b6000602082019050610fcf6000830184610ec9565b92915050565b600082825260208201905092915050565b6000610ff182611004565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061103982611040565b9050919050565b600061104b82611052565b9050919050565b60008160601b9050919050565b7f437573746f6469616e3a206163636f756e742065786973747300000000000000600082015250565b7f437573746f6469616e3a206e6f207065726d697373696f6e0000000000000000600082015250565b7f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000600082015250565b7f437573746f6469616e3a2061646d696e20726571756972656400000000000000600082015250565b61110c81610fe6565b811461111757600080fd5b50565b61112381611024565b811461112e57600080fd5b5056fe608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061250e806100606000396000f3fe6080604052600436106100a05760003560e01c8063848debfb11610064578063848debfb14610191578063c1eaaf55146101ba578063c4d66de8146101e3578063c855dea31461020c578063f14210a614610235578063fe90ff7d1461025e576100a7565b8063150b7a02146100ac578063375b74c3146100e957806348db5f8914610114578063528be0a91461013f5780635ecb16cd14610168576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190611a65565b610287565b6040516100e09190611f74565b60405180910390f35b3480156100f557600080fd5b506100fe61029b565b60405161010b9190611f8f565b60405180910390f35b34801561012057600080fd5b506101296102bf565b6040516101369190611eb9565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190611c87565b6102e5565b005b34801561017457600080fd5b5061018f600480360381019061018a9190611b38565b610502565b005b34801561019d57600080fd5b506101b860048036038101906101b39190611b7d565b610727565b005b3480156101c657600080fd5b506101e160048036038101906101dc9190611ae0565b610e13565b005b3480156101ef57600080fd5b5061020a60048036038101906102059190611a13565b610f7e565b005b34801561021857600080fd5b50610233600480360381019061022e9190611bf2565b611050565b005b34801561024157600080fd5b5061025c60048036038101906102579190611c87565b611537565b005b34801561026a57600080fd5b5061028560048036038101906102809190611c87565b61167c565b005b600063150b7a0260e01b9050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e790611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b15801561045957600080fd5b505afa15801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663528be0a9836040518263ffffffff1660e01b81526004016104cc919061208a565b600060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610592576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105899061204a565b60405180910390fd5b60005b828290508110156107225760008383838181106105db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906105f09190611a13565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161062d9190611eb9565b60206040518083038186803b15801561064557600080fd5b505afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190611cb0565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106ba929190611f0b565b602060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611c5e565b505050808061071a906122a5565b915050610595565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae9061204a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f476f5866040518163ffffffff1660e01b815260040160206040518083038186803b15801561082057600080fd5b505afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611a3c565b905060005b85859050811015610c295760008686838181106108a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108b89190611a13565b905060008585848181106108f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109399190611eb9565b60206040518083038186803b15801561095157600080fd5b505afa158015610965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190611cb0565b9050808211156109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590611fca565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b8152600401610a09929190611f0b565b602060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5b9190611c5e565b50600063096c5e1a60e01b8a8a87818110610a9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ab49190611a13565b898988818110610aed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135604051602401610b05929190611f0b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008673ffffffffffffffffffffffffffffffffffffffff1682604051610b8b9190611ea2565b6000604051808303816000865af19150503d8060008114610bc8576040519150601f19603f3d011682016040523d82523d6000602084013e610bcd565b606091505b5050905080610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c089061202a565b60405180910390fd5b50505050508080610c21906122a5565b91505061085d565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e7b687346040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611a3c565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d089190611eb9565b60206040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611cb0565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610db7929190611f0b565b602060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190611c5e565b5050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a9061204a565b60405180910390fd5b600083905060005b83839050811015610f77578173ffffffffffffffffffffffffffffffffffffffff166342842e0e3033878786818110610f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040518463ffffffff1660e01b8152600401610f3293929190611ed4565b600060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050508080610f6f906122a5565b915050610eab565b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390611faa565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156110b657600080fd5b505afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee9190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115290611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c457600080fd5b505afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190611cb0565b8585905061120a9190612133565b90508047101561124f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112469061200a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ea8dcce846040518263ffffffff1660e01b81526004016112a89190611eb9565b60206040518083038186803b1580156112c057600080fd5b505afa1580156112d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f89190611c5e565b611337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132e9061206a565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a057600080fd5b505afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663c855dea3878787876040518563ffffffff1660e01b81526004016114199493929190611f34565b600060405180830381600087803b15801561143357600080fd5b505af1158015611447573d6000803e3d6000fd5b5050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190611a3c565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561152e573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115be9061204a565b60405180910390fd5b60004790508082111561160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690611fca565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611677573d6000803e3d6000fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663570ca7356040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e257600080fd5b505afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611a3c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177e90611fea565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b8de05476040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190611a3c565b90508073ffffffffffffffffffffffffffffffffffffffff1663fe90ff7d836040518263ffffffff1660e01b8152600401611863919061208a565b600060405180830381600087803b15801561187d57600080fd5b505af1158015611891573d6000803e3d6000fd5b505050505050565b60006118ac6118a7846120ca565b6120a5565b9050828152602081018484840111156118c457600080fd5b6118cf848285612232565b509392505050565b6000813590506118e68161247c565b92915050565b6000815190506118fb8161247c565b92915050565b60008083601f84011261191357600080fd5b8235905067ffffffffffffffff81111561192c57600080fd5b60208301915083602082028301111561194457600080fd5b9250929050565b60008083601f84011261195d57600080fd5b8235905067ffffffffffffffff81111561197657600080fd5b60208301915083602082028301111561198e57600080fd5b9250929050565b6000815190506119a481612493565b92915050565b600082601f8301126119bb57600080fd5b81356119cb848260208601611899565b91505092915050565b6000813590506119e3816124aa565b92915050565b6000815190506119f8816124aa565b92915050565b600081359050611a0d816124c1565b92915050565b600060208284031215611a2557600080fd5b6000611a33848285016118d7565b91505092915050565b600060208284031215611a4e57600080fd5b6000611a5c848285016118ec565b91505092915050565b60008060008060808587031215611a7b57600080fd5b6000611a89878288016118d7565b9450506020611a9a878288016118d7565b9350506040611aab878288016119d4565b925050606085013567ffffffffffffffff811115611ac857600080fd5b611ad4878288016119aa565b91505092959194509250565b600080600060408486031215611af557600080fd5b6000611b03868287016118d7565b935050602084013567ffffffffffffffff811115611b2057600080fd5b611b2c8682870161194b565b92509250509250925092565b60008060208385031215611b4b57600080fd5b600083013567ffffffffffffffff811115611b6557600080fd5b611b7185828601611901565b92509250509250929050565b60008060008060408587031215611b9357600080fd5b600085013567ffffffffffffffff811115611bad57600080fd5b611bb987828801611901565b9450945050602085013567ffffffffffffffff811115611bd857600080fd5b611be48782880161194b565b925092505092959194509250565b60008060008060608587031215611c0857600080fd5b600085013567ffffffffffffffff811115611c2257600080fd5b611c2e8782880161194b565b94509450506020611c41878288016118d7565b9250506040611c52878288016119fe565b91505092959194509250565b600060208284031215611c7057600080fd5b6000611c7e84828501611995565b91505092915050565b600060208284031215611c9957600080fd5b6000611ca7848285016119d4565b91505092915050565b600060208284031215611cc257600080fd5b6000611cd0848285016119e9565b91505092915050565b611ce28161218d565b82525050565b6000611cf48385612106565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611d2357600080fd5b602083029250611d34838584612232565b82840190509392505050565b611d49816121ab565b82525050565b6000611d5a826120fb565b611d648185612117565b9350611d74818560208601612241565b80840191505092915050565b611d898161220e565b82525050565b6000611d9c601683612122565b9150611da78261235d565b602082019050919050565b6000611dbf601d83612122565b9150611dca82612386565b602082019050919050565b6000611de2602083612122565b9150611ded826123af565b602082019050919050565b6000611e05601c83612122565b9150611e10826123d8565b602082019050919050565b6000611e28601a83612122565b9150611e3382612401565b602082019050919050565b6000611e4b601e83612122565b9150611e568261242a565b602082019050919050565b6000611e6e601e83612122565b9150611e7982612453565b602082019050919050565b611e8d816121f7565b82525050565b611e9c81612201565b82525050565b6000611eae8284611d4f565b915081905092915050565b6000602082019050611ece6000830184611cd9565b92915050565b6000606082019050611ee96000830186611cd9565b611ef66020830185611cd9565b611f036040830184611e84565b949350505050565b6000604082019050611f206000830185611cd9565b611f2d6020830184611e84565b9392505050565b60006060820190508181036000830152611f4f818688611ce8565b9050611f5e6020830185611cd9565b611f6b6040830184611e93565b95945050505050565b6000602082019050611f896000830184611d40565b92915050565b6000602082019050611fa46000830184611d80565b92915050565b60006020820190508181036000830152611fc381611d8f565b9050919050565b60006020820190508181036000830152611fe381611db2565b9050919050565b6000602082019050818103600083015261200381611dd5565b9050919050565b6000602082019050818103600083015261202381611df8565b9050919050565b6000602082019050818103600083015261204381611e1b565b9050919050565b6000602082019050818103600083015261206381611e3e565b9050919050565b6000602082019050818103600083015261208381611e61565b9050919050565b600060208201905061209f6000830184611e84565b92915050565b60006120af6120c0565b90506120bb8282612274565b919050565b6000604051905090565b600067ffffffffffffffff8211156120e5576120e461231d565b5b6120ee8261234c565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061213e826121f7565b9150612149836121f7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612182576121816122ee565b5b828202905092915050565b6000612198826121d7565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061221982612220565b9050919050565b600061222b826121d7565b9050919050565b82818337600083830152505050565b60005b8381101561225f578082015181840152602081019050612244565b8381111561226e576000848401525b50505050565b61227d8261234c565b810181811067ffffffffffffffff8211171561229c5761229b61231d565b5b80604052505050565b60006122b0826121f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156122e3576122e26122ee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4163636f756e743a206e6f207065726d697373696f6e00000000000000000000600082015250565b7f4163636f756e743a20696e73756666696369656e742062616c616e6365000000600082015250565b7f4163636f756e743a2063616c6c6572206d757374206265206f70657261746f72600082015250565b7f4163636f756e743a20696e737566666963656e742062616c616e636500000000600082015250565b7f4163636f756e743a2073656c6c206974656d73206661696c6564000000000000600082015250565b7f4163636f756e743a2063616c6c6572206d75737420626520706c617965720000600082015250565b7f4163636f756e743a20756e737570706f72746564207175657374547970650000600082015250565b6124858161218d565b811461249057600080fd5b50565b61249c8161219f565b81146124a757600080fd5b50565b6124b3816121f7565b81146124be57600080fd5b50565b6124ca81612201565b81146124d557600080fd5b5056fea26469706673582212208476ed0d8d146a222f5474a014f71e23cbf0c4e4727d85d0e3c525504f81066764736f6c63430008040033a2646970667358221220c4db0e412b01659feb69d5e4d1ae6102c0cbd5a9f8e1f16bb895ffe6f168321564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4200,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4202,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4204,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4207,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4214,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "playerToAccount",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(UintToAddressMap)2914_storage"
      },
      {
        "astId": 4218,
        "contract": "contracts/Custodian.sol:Custodian",
        "label": "questTypes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)3353_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 3352,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3159_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)2684_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 2679,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)3353_storage"
          },
          {
            "astId": 2683,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3159_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3154,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3158,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)2914_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 2913,
            "contract": "contracts/Custodian.sol:Custodian",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)2684_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}